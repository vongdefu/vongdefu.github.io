import{_ as l,W as n,X as h,Y as e,Z as i,$ as r,a0 as t,C as d}from"./framework-16b96b76.js";const o={},c=t('<h3 id="_1-主键id" tabindex="-1"><a class="header-anchor" href="#_1-主键id" aria-hidden="true">#</a> 1. 主键ID</h3><p>分库分表后原有主键ID失效，需要改造主键ID。</p><h3 id="_2-方案1" tabindex="-1"><a class="header-anchor" href="#_2-方案1" aria-hidden="true">#</a> 2. 方案1</h3><p>jdk中自带的UUID</p><ul><li>好处： <ul><li>不用引入额外的jar</li></ul></li><li>坏处： <ul><li>更占用内存。</li><li>不适合作为mysql的主键。 <ul><li>无序性会导致磁盘随机IO、数据叶分裂；</li><li>普通索引需要存储主键值，会导致B+树增高，IO次数变多；</li></ul></li><li>基于mac的地址算法会导致mac地址泄漏。</li></ul></li></ul><h3 id="_3-方案2" tabindex="-1"><a class="header-anchor" href="#_3-方案2" aria-hidden="true">#</a> 3. 方案2</h3><p>雪花算法</p><ul><li><h2 id="好处" tabindex="-1"><a class="header-anchor" href="#好处" aria-hidden="true">#</a> 好处</h2></li><li><h2 id="坏处" tabindex="-1"><a class="header-anchor" href="#坏处" aria-hidden="true">#</a> 坏处</h2></li></ul><h3 id="_4-方案3" tabindex="-1"><a class="header-anchor" href="#_4-方案3" aria-hidden="true">#</a> 4. 方案3</h3><p>号段模式——美团的Leaf</p><h3 id="_5-参考" tabindex="-1"><a class="header-anchor" href="#_5-参考" aria-hidden="true">#</a> 5. 参考</h3>',11),s={href:"https://chenjiabing666.github.io/2021/08/15/5%E7%A7%8D%E5%85%A8%E5%B1%80ID%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F%E3%80%81%E4%BC%98%E7%BC%BA%E7%82%B9%E5%8F%8A%E6%94%B9%E8%BF%9B%E6%96%B9%E6%A1%88%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E5%87%A0%E7%A7%8D%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://mp.weixin.qq.com/s/XJbWqSMloUXOl0DGbHw_og",target:"_blank",rel:"noopener noreferrer"};function u(E,p){const a=d("ExternalLinkIcon");return n(),h("div",null,[c,e("ul",null,[e("li",null,[e("a",s,[i("5种全局ID生成方式、优缺点及改进方案，你知道哪几种？"),r(a)])])]),e("p",null,[e("a",_,[i("集群高并发环境下，如何保证分布式唯一全局ID生成？"),r(a)])])])}const B=l(o,[["render",u],["__file","id.html.vue"]]);export{B as default};
