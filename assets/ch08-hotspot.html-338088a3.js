import{_ as e,W as n,X as s,a0 as t}from"./framework-16b96b76.js";const u="/assets/1726200002579-27408dfb.png",o="/assets/1726197928105-736ccde5.png",r="/assets/1700537535532-43c372ec.png",c="/assets/1700547653000-89547729.png",d="/assets/1677382522133-2272611f.png",g="/assets/1677382997226-d1150be8.png",p="/assets/1677394999462-598221d9.png",h="/assets/1677470190520-be4ddd5c.png",l="/assets/1677470237387-46e7dab9.png",m="/assets/1688216077816-9af29d20.png",C="/assets/1688214075720-eb6e617a.png",b="/assets/1677470347309-949b433e.png",X="/assets/1677470423655-e14baddf.png",v="/assets/1677461815506-be19814e.png",_="/assets/1677311728992-4aa6cecb.png",f="/assets/1700722465604-01c8867c.png",i="/assets/1677471275980-f45fa570.png",a="/assets/1688213904945-c736fba9.png",G="/assets/1688214017850-aee5c128.png",K="/assets/1688213942983-8b6b1506.png",S="/assets/1677383394171-3ef4651c.png",x="/assets/1677483047515-14727d61.png",M="/assets/1677483070594-5e2fa7be.png",P={},y=t('<h1 id="_8-hotspot" tabindex="-1"><a class="header-anchor" href="#_8-hotspot" aria-hidden="true">#</a> 8. Hotspot</h1><h3 id="_1-不同的回收方式具有不同的运行期内存结构模型" tabindex="-1"><a class="header-anchor" href="#_1-不同的回收方式具有不同的运行期内存结构模型" aria-hidden="true">#</a> 1. 不同的回收方式具有不同的运行期内存结构模型</h3><ul><li>分区 <ul><li>区域划分</li></ul></li><li>分代 <ul><li>Java8之前 <ul><li>新生代 <ul><li>Eden</li><li>S0</li><li>S1</li></ul></li><li>老年代Tenured</li><li>永久区，也就是方法区</li></ul></li><li>Java8及以后 <ul><li>新生代 <ul><li>Eden</li><li>S0</li><li>S1</li></ul></li><li>老年代Tenured</li><li>元空间，也就是方法区</li></ul></li></ul></li></ul><h3 id="_2-前置知识点" tabindex="-1"><a class="header-anchor" href="#_2-前置知识点" aria-hidden="true">#</a> 2. 前置知识点</h3><h4 id="_2-1-并发-vs-并行" tabindex="-1"><a class="header-anchor" href="#_2-1-并发-vs-并行" aria-hidden="true">#</a> 2.1. 并发 VS 并行</h4><figure><img src="'+u+'" alt="1726200002579" tabindex="0" loading="lazy"><figcaption>1726200002579</figcaption></figure><p><img src="'+o+'" alt="1726200014505" loading="lazy"> 并发 ： 多个任务在单个处理器上运./ch08-hotspot/image/1726200002579.png多个任务同时发生一样，解决了不同任务执行过程中存在的阻塞问题，可以理解为任务阻塞时，就让出处理器的执行权限，目的是更大限度的压榨处理器的处理能力</p><p>并行： 同一时刻很多任务同时获得处./ch08-hotspot/image/1726200014505.png</p><p>串行：</p><h4 id="_2-2-内存溢出-vs-内存泄露" tabindex="-1"><a class="header-anchor" href="#_2-2-内存溢出-vs-内存泄露" aria-hidden="true">#</a> 2.2. 内存溢出 VS 内存泄露</h4><ul><li>内存溢出： 没有内存空间可用，并且经过垃圾回收器收集后依然没有内存空间可用</li><li>内存泄漏： 一些对象已经不再被应用程序使用，但是收集器又没有办法回收 <ul><li>常见的内存泄露 <ul><li>单例模式中单例对象持有对外部对象的引用</li><li>IO资源未关闭，如数据库链接、Socket链接、文件链接等</li></ul></li></ul></li></ul><h3 id="_3-七款经典垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_3-七款经典垃圾回收器" aria-hidden="true">#</a> 3. 七款经典垃圾回收器</h3><figure><img src="'+r+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>这里的并行是指： 垃圾收集线程由原来的单个垃圾收集线程变成多个垃圾收集线程，也就是说同一时间有多个垃圾收集线程在运行。 这里的并发是指： 垃圾收集./ch08-hotspot/image/1700537535532.png</p><figure><img src="'+c+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="_3-1-串行收集器" tabindex="-1"><a class="header-anchor" href="#_3-1-串行收集器" aria-hidden="true">#</a> 3.1. 串行收集器</h4><p>./ch08-hotspot/image/1700547653000.png</p><ul><li>Serial收集器 <ul><li>针对新生代的收集器</li><li>采用复制算法</li><li>是Client模式下默认的新生代垃圾回收器</li><li>STW机制：在垃圾回收时，会使用<strong>一个CPU或一个收集线程</strong>来完成垃圾收集工作 <ul><li>意味着进行垃圾回收时，必须暂停其他工作线程</li></ul></li></ul></li><li>SerialOld 收集器 <ul><li>针对老年代的收集器</li><li>采用标记-整理算法</li><li>是Server模式下默认的老年代垃圾回收器</li><li>进行垃圾回收时也需要STW机制</li></ul></li><li>限定单核CPU才可以使用，一般web应用程序中是不会采用这种串行的垃圾收集器的 <ul><li>配合使用 <ul><li><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul></li></ul><h4 id="_3-2-并行收集器" tabindex="-1"><a class="header-anchor" href="#_3-2-并行收集器" aria-hidden="true">#</a> 3.2. 并行收集器</h4><p>./ch08-hotspot/image/1677382522133.png</p><blockquote><p>并行收集器利用了计算机多核的特性，扩展了串行收集器的并行收集能力。 强调的是收集器利用多核的特性。</p></blockquote><ul><li>ParNew收集器 <ul><li>除了采用并行回收的方式执行内存回收外，与Serial收集器几乎没有任何区别</li><li>同样采用复制算法、STW机制</li><li>是多数JVM运行在Server模式下新生代的默认垃圾收集器</li></ul></li><li>ParallelScavenge回收器 <ul><li>吞吐量优先的垃圾收集器</li><li>与ParNew收集器实现方式基本类似，只不过是保证了吞吐量优先</li><li>可以使用-XX:+UseAdaptiveSizePolicy，开启动态自适应策略，让JVM根据当前系统运行情况，动态调整新生代大小、Eden和Survivor区域的比例以及晋升老年代对象年龄，以期获得最合适的停顿时间或最大的吞吐量。</li></ul></li><li>ParallelOld收集器 <ul><li>除了采用并行回收的方式执行内存回收外，其他与SerialOld收集器几乎没有区别</li></ul></li><li>适合执行批量处理、订单处理、工资支付、科学计算的应用程序 <ul><li>配合使用 <ul><li><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul></li></ul><h4 id="_3-3-并发收集器" tabindex="-1"><a class="header-anchor" href="#_3-3-并发收集器" aria-hidden="true">#</a> 3.3. 并发收集器</h4><p>./ch08-hotspot/image/1677382997226.png</p><h5 id="_3-3-1-cms-回收器" tabindex="-1"><a class="header-anchor" href="#_3-3-1-cms-回收器" aria-hidden="true">#</a> 3.3.1. CMS 回收器</h5><ul><li>让垃圾收集线程与用户工作线程并发执行</li><li>主要关注点是：减少停顿时间，低延迟</li><li>老年代的垃圾回收器，无法与ParallelScavenge回收器一并使用，只能配合ParNew和Serial串行收集器，在预留空间无法保证工作线程的运行时，就会临时启动Serial Old收集器作为老年代的垃圾回收器</li><li>原理及过程 <ul><li><ol><li>初始标记</li></ol><ul><li>利用STW机制，标记出GCRoot的对象，速度非常快</li></ul></li><li><ol start="2"><li>并发标记</li></ol><ul><li>并发标记出GCRoots的直接关联对象并遍历整个对象图，其过程是与工作线程一并工作，耗时较长但是不需要停顿用户线程，</li></ul></li><li><ol start="3"><li>重新标记</li></ol><ul><li>再次利用STW机制，标记第二阶段产生的新的变动的对象，但是垃圾收集线程是并发进行的</li></ul></li><li><ol start="4"><li>并发清除</li></ol><ul><li>与用户工作线程一同工作，清除掉已经死亡的对象，并释放空间</li><li>使用标记-清除算法 <ul><li>不可避免的会产生一些内存碎片，因此也不能使用指针碰撞的方式分配空间，只能使用空闲列表的方式分配空间</li><li>不使用标记-整理算法的原因：在清理的时候，用户线程还在使用对应的内存空间，整理内存空间会导致用户线程正在使用的内存空间失效。</li></ul></li></ul></li></ul></li><li>不会像其他老年代收集器一样，等到老年代几乎被填满之后才进行收集，而是当堆内存使用超过一个阈值后就开始进行回收，以确保程序在CMS运行期间有足够的空间支持应用程序的运行，如果预留的空间无法保证程序的运行，就会出现“Concurrent Mode Failuer”失败，此时JVM会临时启用Serial Old收集器作为老年代的垃圾收集器，停顿时间就会变的很长</li><li>优缺点 <ul><li>并发收集 <ul><li>垃圾收集线程与用户工作线程是并发执行的</li></ul></li><li>低延迟 <ul><li>除了初始阶段和重新标记阶段会出现短暂的停顿外，其他阶段不会出现停顿，是一款专注入低延迟的垃圾收集器</li></ul></li><li>会产生浮动垃圾 <ul><li>在并发清除阶段，由于用户工作线程依然在工作，也有可能会产生一些垃圾对象，但是此时CMS已经无法对这些对象进行标记，只能等到下次GC时再进行清除</li></ul></li><li>对CPU资源敏感 <ul><li>与等待老年代几乎填满后再进行垃圾回收的其他老年代收集器不同，CMS回收器是当堆空间使用到一定阈值时就会开始进行回收垃圾</li></ul></li><li>会产生内存碎片 <ul><li>并发清除阶段使用的是标记-清除算法，这种算法会产生内存碎片问题</li></ul></li></ul></li><li>迭代 <ul><li>JDK9及以后的版本，使用-XX:+UseConcMarkSweepGC开启CMS垃圾收集器时，会收到一个警告信息——提示CMS未来将被废弃</li><li>JDK14完全移除CMS，用户使用-XX:+UseConcMarkSweepGC显式开启CMS收集器时，不会收到提示，会自动使用默认的垃圾收集器进行收集</li></ul></li><li>特点 <ul><li>低延迟</li><li>并发标记</li><li><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul><h5 id="_3-3-2-g1-回收器" tabindex="-1"><a class="header-anchor" href="#_3-3-2-g1-回收器" aria-hidden="true">#</a> 3.3.2. G1 回收器</h5><p>./ch08-hotspot/image/1677394999462.png</p><ul><li>随着业务的发展，机器越来越先进，CPU核心数越来越多，JVM管理的内存越来越大，之前的GC收集器已经不能满足业务的要求了</li><li>基本原理 <ul><li>把堆空间使用“化整为零”的思想，划分成相同大小的多个区域，之后每次只回收部分区域。</li><li>把堆空间“化整为零”，分割成很多不相关的区域，并且G1会维护一个优先列表以便追踪每一个区域的垃圾堆积的价值大小，回收时优先回收价值最大的区域。</li></ul></li><li>回收过程 <ul><li>先进行年轻代GC【注意，要解决跨区域引用的问题】 <ul><li><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption><ul><li>如果没有被回收的区域内的对象引用了要回收的区域的对象，该如何解决？是否需要全堆扫描？全堆扫描的效率低下。使用记忆集进行解决，JVM会为每一个Region分配一个记忆集，记忆集中记录了本区域内哪些对象（包括引用类型对象）被其他区域所引用。在实际回收过程中，GCRoots引用链引用到的本区域内的对象加上记忆集中的对象构成整个存活对象集。</li><li>【重点】G1的每个Region都维护有自己的记忆集，这些记忆集会记录下别的Region 指向自己的指针，并标记这些指针分别在哪些卡页（卡表的单个元素）的范围之内。G1的记忆集在存储结构的本质上是一 种哈希表，Key是别的Region的起始地址，Value是一个集合，里面存储的元素是卡表的索引号。这种“双向”的卡表结构（卡表是“我指向谁”，这种结构还记录了“谁指向我”），由于记忆集的存在，会造成JVM堆容量10%到20%的空间浪费。</li><li>卡表./ch08-hotspot/image/1677470190520.png个区域（哪个卡页）。由于引用类型对象涉及到写-写操作时的同步问题，因此还需要“写屏障”技术避免线程安全问题，写屏障原理是使用中断的方式。</li></ul></li><li>当年轻代的Eden区用尽时开始年轻代回收过程，回收过程是并行的独占式的。G1会暂停所有工作线程，启动多线程回收年轻代，把年轻代的存活对象转移到S区或者老年区</li></ul></li><li>老年代并发标记过程（Concurrent Marking） <ul><li><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption><ul><li>从GC日志中查看过程 <ul><li><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul></li><li><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>当堆内存使用达到一定的值后，开始老年代并发标记过程</li></ul></li><li>混合回收（Mixed./ch08-hotspot/image/1688216077816.png <ul><li><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption><ul><li><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li>老年代并发标记过程完成后，立刻进入混合回收阶段，G1从老年代移动存活对象到空闲区间，使部分空闲区间成为老年代的一部分。老年代的回收并不是全部回收的，只回收其中的一部分。部分年轻代也一并回收</li></ul></li><li>（如果需要，./ch08-hotspot/image/1677470265347.png评估失败提供了一种失败保护机制，即强力回收） <ul><li>![](././ch08-hotspot/image/1677470347309.png</li></ul></li></ul></li><li>分区过程 <ul><li>如果设置了Region数量，那么Region大小就不是固定的，但是大小肯定是2的幂次方，并且在1~32M之间；如果设置了Region大小，那么Region数量就不是固定的，但是肯定是2048附近；</li><li>通过-XX:./ch08-hotspot/image/1677470382018.png</li><li>分区大小一定相同，且在JVM生命周期内不会被改变</li></ul></li><li>特点 <ul><li><ol><li>属于分代型垃圾回收器，同时兼顾年轻代和老年代，不同Region之间使用复制算法，整体可以看作是标记-整理算法</li></ol></li><li><ol start="2"><li>并行性与并发性</li></ol></li><li><ol start="3"><li>空间整合</li></ol><ul><li>Region之间是复制算法，整体看上去是标记-整理算法</li></ul></li><li><ol start="4"><li>可预测的停顿时间模型</li></ol><ul><li>通过维护的优先列表，保证优先回收价值最大的Region，保证在有效的时间内获取尽可能高的收集效率</li></ul></li><li><ol start="5"><li>小内存应用上CMS表现优于G1，但大内存应用上G1表现优于CMS，平衡点6-8G</li></ol></li></ul></li><li>使用 <ul><li>jdk1.7移除了“实验”标志</li><li>jdk8中还不是默认的垃圾收集器，需要使用-XX:+UseG1GC进行启用</li><li>JDK9的默认垃圾回收器</li><li>避免使用-Xmn或-XX:NewRatio等显式设置年轻代大小，因为这些参数会覆盖设置的暂停时间参数，最好是让垃圾回收器自己调节</li><li>避免使用苛刻的暂停时间目标</li></ul></li><li><img src="'+X+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption><ul><li>每个Region的角色只能是E、S、O、H中的一个，但是随着GC的过程，身份是不确定的，有可能这次GC前是E，下次GC就变成了O</li><li>设置./ch08-hotspot/image/1677470423655.png代中，但是如果它是一个短期存在的对象，这就会对老年代区域产生影响，G1就划分了一个H角色来保存大对象，并规定如果一个H区装不下，就寻找连续的H区来存储。 ./ch08-hotspot/image/1677461815506.png</li></ul></li></ul><h4 id="_3-4-组合使用" tabindex="-1"><a class="header-anchor" href="#_3-4-组合使用" aria-hidden="true">#</a> 3.4. 组合使用</h4><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><img src="'+f+'" alt="周志明-第三版" loading="lazy"> ./ch08-hotspot/image/1677311728992.png</p><ul><li>组合使用 <ul><li>组合关系./ch08-hotspot/image/1700722465604.png</li><li><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li>目前，基本上都使用G1</li><li><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="'+K+'" alt="" loading="lazy"> ./ch08-hotspot/image/1688214017850.png</li></ul></li></ul><h4 id="_3-5-ch08-hotspot-image-1677394999462-png" tabindex="-1"><a class="header-anchor" href="#_3-5-ch08-hotspot-image-1677394999462-png" aria-hidden="true">#</a> 3.5./ch08-hotspot/image/1677394999462.png</h4><p>./ch08-hotspot/image/1688214075720.png</p><ul><li>Serial GC在Serverless应用场景下找到了新的舞台</li><li>CMS GC在jdk9中被标记为废弃，JDK14中移除</li><li>ZGC和Shenandoah主打低延迟，可以做到在不影响吞吐量的前提下，实现任意堆内存大小下的停顿时间限制在10毫秒以内的低延迟</li></ul><h3 id="_4-代码运行方式" tabindex="-1"><a class="header-anchor" href="#_4-代码运行方式" aria-hidden="true">#</a> 4. 代码运行方式</h3><ul><li>混合运行模式（解释运行+编译运行）</li><li>解释器</li><li>编译器 <ul><li>分类 <ul><li>前端编译器 <ul><li>把.java文件转变成.class文件 <ul><li>包括javac、ECJ等</li></ul></li></ul></li><li>后端编译器，也叫JIT编译器 <ul><li>把字节码文件转变成可执行的机器码 <ul><li>C1编译器 <ul><li>对字节码进行简单可靠的优化，以期达到更快的编译速度，是虚拟机client模式下的默认编译器</li><li>优化手段 <ul><li>方法内联</li><li>去虚拟化</li><li>冗余消除</li></ul></li></ul></li><li>C2编译器 <ul><li>对字节码进行长时间的优化，以期达到更高的代码执行效率，是虚拟机server模式下的默认编译器</li><li>优化手段 <ul><li>栈上分配</li><li>同步消除</li><li>标量替换</li></ul></li></ul></li><li>C1的启动时间比C2启动时间短，系统稳定后，C2执行效率比C1高</li></ul></li></ul></li><li>静态提前编译器，也叫AOT编译器 <ul><li>直接把.java文件转变成可执行的机器码 <ul><li>包括GCJ等，还处于实验阶段</li></ul></li></ul></li><li>HotSpotJVM是两种方式并存的 <ul><li>原理：等待所有的代码编译完成再进行运行是不值得的，项目启动前期就要使用解释器解释执行一些代码，同时也会针对执行到的热点代码进行探测，对热点代码再进行编译执行。相当于对二者进行取长补短 <ul><li>使用热点探测技术探测热点代码 <ul><li>如何探测热点代码 <ul><li>使用方法调用计数器 <ul><li>统计方法的调用次数</li><li>-XX:CompileThreshold</li></ul></li><li>回边计数器 <ul><li>统计循环体的执行次数</li></ul></li></ul></li><li>探测到热点代码后 <ul><li>栈上分配</li><li>同步消除</li><li>标量替换</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="_5-常用参数总结" tabindex="-1"><a class="header-anchor" href="#_5-常用参数总结" aria-hidden="true">#</a> 5. 常用参数总结</h3><ul><li>Java堆 <ul><li>-Xms <ul><li>Java堆初始化大小，默认是物理内存总容量/64</li></ul></li><li>-Xmx <ul><li>Java堆最大容量，默认是物理内存总容量/4</li></ul></li><li>-XX:NewRatio <ul><li>【老年代容量：新生代容量】的比例，默认是2，表示新生代占总容量的1/3，老年代占总容量的2/3</li></ul></li><li>-Xmn <ul><li>新生代的最大容量，S0+S1+Eden所能使用的最大容量，一般默认即可</li></ul></li><li>-XX:SurvivorRatio <ul><li>S0、S1与Eden区的比例，默认是8，表示S0:S1:Eden=1:1:8</li></ul></li><li>-XX:MaxTenuringThreshold <ul><li>对象进入老年代区的最大年龄，默认是15</li></ul></li><li>-XX:HandlePromotionFailure <ul><li>是否开启空间分配担保</li><li>值为True/False</li></ul></li><li>-XX:UseTLAB <ul><li>是否开启TLAB</li><li>值为True/False</li></ul></li><li>-XX:TLABWasteTargetPencent <ul><li>设置TLAB占用Eden空间的大小</li></ul></li><li>一般情况下会把这两个值设置成相同数值，目的是为了减少内存重新分配的次数，提高性能</li></ul></li><li>虚拟机栈 <ul><li>-Xss <ul><li>线程的最大栈空间，决定了函数的最大调用深度，常见的值有25k、64k、128k等</li></ul></li></ul></li><li>方法区 <ul><li>JDK8以前 <ul><li>-XX:PermSize</li><li>-XX:MaxPermSize</li></ul></li><li>JDK8及以后 <ul><li>-XX:MetaspaceSize</li><li>-XX:MaxMetaspaceSize</li></ul></li><li>-Xnoclassgc <ul><li>不开启方法区的gc</li></ul></li><li>-XX:+TraceClass-Loading / -XX:+TraceClassUnloading <ul><li>查看类加载和类卸载信息</li></ul></li></ul></li><li>执行器 <ul><li>-Xint <ul><li>完全使用解释器的方式执行</li></ul></li><li>-Xcomp <ul><li>完全使用即时编译器的方式执行 <ul><li>-client <ul><li>使用C1编译器，对字节码进行简单可靠的优化，达到更快的编译速度</li></ul></li><li>-server <ul><li>使用C2编译器，对字节码进行较长时间的优化，达到更高的代码执行效率</li></ul></li></ul></li></ul></li><li>-Xmixed <ul><li>使用混合的方式执行</li></ul></li></ul></li><li>垃圾回收器 <ul><li>-XX:+UseSerialGC <ul><li>指定jvm在新生代和老年代收集内存时都是用串行收集器 <ul><li>等价于新生代使用Serial收集器、老年代使用SerialOld收集器</li></ul></li></ul></li><li>-XX:+UseParNewGC <ul><li>表示新生代使用ParNew的收集器，不影响老年代</li></ul></li><li>-XX:+UseParallelGC <ul><li>手动指定新生代使用Parallel并行收集器</li></ul></li><li>-XX:+UseParallelOldGC <ul><li>手动指定老年代使用并行收集器</li></ul></li><li>-XX:+UseG1GC <ul><li>手动指定使用G1垃圾回收器</li></ul></li><li>-XX:ParallelGCThreads <ul><li>使用并行收集器时，设置年轻代并行收集器的线程数，默认与CPU数量一致 <ul><li><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li></ul></li><li>-XX:MaxGCPauseMillis <ul><li>设置垃圾收集器最大停顿时间，STW时间，单位是毫秒</li></ul></li><li>-XX:+Use./ch08-hotspot/image/1677383394171.png <ul><li>ParallelScavenge开启自适应策略 <ul><li>JVM会自动调整年轻代区域大小、Eden与S区比例、老年代年龄等参数，以达到堆大小、吞吐量和停顿时间的平衡点</li><li>手动调优比较困难的场景下，可以设置此参数，把调优工作交给jvm</li></ul></li></ul></li><li>-XX:GCTimeRatio <ul><li>垃圾收集时间占总时间的比例</li><li>取值范围：0-100，默认是99，表示垃圾回收时间不超过1%</li></ul></li><li>-XX:+UseConcMarkSweepGC</li><li>-XX:+CMSInitialingOccupanyFraction</li><li>-XX:+UseCMSCompactAtFullCollection</li><li>-XX:CMSFullGCsBeforeCompaction</li><li>-XX:ParallelCMSThreads</li><li>-XX:G1HeapRegionSize <ul><li>设置每一个Region的大小</li></ul></li><li>-XX:ConcGCThreads <ul><li>设置并发表计的线程数</li></ul></li><li>-XX:InitiatingHeapOccupancyParcent <ul><li>设置并发GC的Java堆占用率的阈值，超过就出发GC，默认是45</li></ul></li><li>JDK8默认的收集器，开启其中一个，另外一个也会被开启，相互激活</li></ul></li><li>监控参数 <ul><li>-XX:+PrintGC</li><li>-Xloggc:../logs/gc.log</li><li>-verbose:gc</li><li>-XX:+PrintGCDetails <ul><li>打印GC详细信息</li></ul></li><li>-XX:+PrintGCTimeStamps <ul><li>输出GC的时间戳，以基准时间的形式</li></ul></li><li>-XX:+PrintGCDateStamps <ul><li>输出GC的时间戳，以日期的形式，如2013-05-04T21:34:24.123+0800</li></ul></li><li>-XX:+PrintHeapAtGC <ul><li>在进行GC的前后打印堆信息</li></ul></li><li>-XX:+PrintFlagsInitial <ul><li>查看jvm所有参数初始默认值</li></ul></li><li>-XX:+PrintFlagsFinal <ul><li>查看jvm所有参数最终值</li></ul></li><li>打印GC简要信息</li></ul></li></ul><h3 id="_6-日志分析" tabindex="-1"><a class="header-anchor" href="#_6-日志分析" aria-hidden="true">#</a> 6. 日志分析</h3><ul><li>MinorGC <ul><li><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li>FullGC <ul><li><img src="'+M+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul></li><li>日志样例./ch08-hotspot/image/1677483047515.png</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>2023-04-04T12:08:11.670+0800: 104.882: [GC (Allocation Failure) [PSYoungGen: 262144K-&gt;43503K(305664K)] 282367K-&gt;138752K(1005056K), 0.0710736 secs] [Times: user=0.34 sys=0.06, real=0.07 secs] 

【2023-04-04T12:08:11.670+0800】 表示发生GC的时间戳
【104.882】表示从JVM启动，到打印这行日志，经过了104.882秒的时间
【GC (Allocation Failure) 】表示GC触发的类型是『Allocation Failure』，即分配失败
【[PSYoungGen: 262144K-&gt;43503K(305664K)]】 表示新生代使用的是ParraleScavenge回收器，262144K-&gt;43503K，表示从262144K回收到43503K，305664K表示新生代总容量
【282367K-&gt;138752K(1005056K) 】 表示整个堆从282367K降到138752K，堆的总容量为1005056K
【0.0710736 secs 】 表示GC的时间是0.0710736秒
【Times: user=0.34 sys=0.06, real=0.07 secs 】 表示整个GC过程中，用户态占用时间、系统态占用时长和真实用时

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>2023-04-04T12:06:27.811+0800: 1.023: <span class="token url">[<span class="token content">Full GC (Metadata GC Threshold) [PSYoungGen: 16268K-&gt;0K(305664K)</span>] [<span class="token variable">ParOldGen: 24K-&gt;15506K(699392K)</span>]</span> 16292K-&gt;15506K(1005056K), [Metaspace: 20436K-&gt;20434K(1067008K)], 0.0200635 secs] [Times: user=0.07 sys=0.00, real=0.02 secs] 
这是FullGC的过程日志。
新生代总大小为305664K，从16268K降到0K；
老年代总大小为699392K，GC前为24K，GC后为15506K；
整个堆大小为1005056K，GC前为16292K，GC后为15506K；
元空间总大小为：1067008K，GC前为20436K，GC后为20434K；
Times: user=0.07 sys=0.00, real=0.02 secs ： 表示整个GC过程中，用户态占用时间、系统态占用时长和真实用时

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>2023-04-04T12:09:49.638+0800: 202.850: <span class="token url">[<span class="token content">Full GC (Ergonomics) [PSYoungGen: 116735K-&gt;0K(160256K)</span>] [<span class="token variable">ParOldGen: 699391K-&gt;14256K(699392K)</span>]</span> 816127K-&gt;14256K(859648K), [Metaspace: 40493K-&gt;40493K(1087488K)], 0.0174834 secs] [Times: user=0.07 sys=0.01, real=0.02 secs] Heap PSYoungGen total 160256K, used 41013K [0x00000007aab00000, 0x00000007c0000000, 0x00000007c0000000)  eden space 116736K, 35% used [0x00000007aab00000,0x00000007ad30d7f8,0x00000007b1d00000)  from space 43520K, 0% used [0x00000007bd580000,0x00000007bd580000,0x00000007c0000000)  to space 116224K, 0% used [0x00000007b1d00000,0x00000007b1d00000,0x00000007b8e80000) ParOldGen total 699392K, used 14256K [0x0000000780000000, 0x00000007aab00000, 0x00000007aab00000)  object space 699392K, 2% used [0x0000000780000000,0x0000000780dec388,0x00000007aab00000) Metaspace used 41838K, capacity 43950K, committed 44592K, reserved 1087488K  class space used 5400K, capacity 5783K, committed 5936K, reserved 1048576Kused 

已使用的空间大小capacity：当前已经分配且未释放的空间容量大小committed：当前已经分配的空间大小reserved：预留的空间大小capacity + 已经被释放的空间容量 = committed

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),T=[y];function z(k,J){return n(),s("div",null,T)}const U=e(P,[["render",z],["__file","ch08-hotspot.html.vue"]]);export{U as default};
