const e=JSON.parse('{"key":"v-818623dc","path":"/01-csbase/designPattern/ch03-template-method.html","title":"模板方法","lang":"zh-CN","frontmatter":{"description":"1. 业务场景 假如一个业务流程需要几个通用的步骤，只有部分细节不一样外，其他的都一样，这种场景都适合使用模板方法模式。例如，喝红茶，喝绿茶、喝白茶等喝茶过程可以分为： 准备茶杯、挑选茶叶、煮茶。 2. 垃圾实现 垃圾的实现就是直接针对每一个场景都实现一套代码。 3. 模板方法实现 垃圾实现中会有很多重复的代码，比如都需要准备茶杯、都需要进行煮茶。 1...","head":[["meta",{"property":"og:url","content":"https://vongdefu.github.io/01-csbase/designPattern/ch03-template-method.html"}],["meta",{"property":"og:site_name","content":"cs-tips"}],["meta",{"property":"og:title","content":"模板方法"}],["meta",{"property":"og:description","content":"1. 业务场景 假如一个业务流程需要几个通用的步骤，只有部分细节不一样外，其他的都一样，这种场景都适合使用模板方法模式。例如，喝红茶，喝绿茶、喝白茶等喝茶过程可以分为： 准备茶杯、挑选茶叶、煮茶。 2. 垃圾实现 垃圾的实现就是直接针对每一个场景都实现一套代码。 3. 模板方法实现 垃圾实现中会有很多重复的代码，比如都需要准备茶杯、都需要进行煮茶。 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"vongdefu"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模板方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"vongdefu\\",\\"url\\":\\"https://github.com/vongdefu\\"}]}"]]},"headers":[{"level":2,"title":"1. 业务场景","slug":"_1-业务场景","link":"#_1-业务场景","children":[]},{"level":2,"title":"2. 垃圾实现","slug":"_2-垃圾实现","link":"#_2-垃圾实现","children":[]},{"level":2,"title":"3. 模板方法实现","slug":"_3-模板方法实现","link":"#_3-模板方法实现","children":[]},{"level":2,"title":"4. 使用","slug":"_4-使用","link":"#_4-使用","children":[]},{"level":2,"title":"5. 其他","slug":"_5-其他","link":"#_5-其他","children":[]},{"level":2,"title":"6. 思路扩展","slug":"_6-思路扩展","link":"#_6-思路扩展","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.78,"words":535},"filePathRelative":"01-csbase/designPattern/ch03-template-method.md","autoDesc":true,"excerpt":""}');export{e as data};
