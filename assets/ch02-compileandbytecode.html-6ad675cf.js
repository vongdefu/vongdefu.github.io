import{_ as s,W as x,X as c,Y as l,Z as o,$ as r,a2 as t,a0 as _,C as a}from"./framework-16b96b76.js";const h="/assets/1726240236741-aefa40e4.png",f="/assets/1726239782868-fcec98a0.png",p={},b=l("h1",{id:"_2-前端编译阶段及字节码文件",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_2-前端编译阶段及字节码文件","aria-hidden":"true"},"#"),o(" 2. 前端编译阶段及字节码文件")],-1),g=l("figure",null,[l("img",{src:h,alt:"1726240236741",tabindex:"0",loading:"lazy"}),l("figcaption",null,"1726240236741")],-1),m={href:"https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html",target:"_blank",rel:"noopener noreferrer"},v=_('<h3 id="_1-作用-ch02-compileandbytecode-image-1726240236741-png" tabindex="-1"><a class="header-anchor" href="#_1-作用-ch02-compileandbytecode-image-1726240236741-png" aria-hidden="true">#</a> 1. 作用./ch02-compileandbytecode/image/1726240236741.png</h3><p>字节码文件<strong>本质上是一个以8位字节为基础单位的二进制流文件</strong>，各个数据项目严格按照顺序紧凑的排列在class文件中。jvm根据其特定的规则解析该二进制数据，从而得到相关信息。</p><p>从更高层次上抽象的话，如果 jvm 就是一个计算机操作系统，而字节码文件就是操作系统的指令集。高级语言通过各种各样的编译器生成字节码文件，然后<strong>通过字节码文件操纵 jvm 完成实际的程序功能</strong>。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>字节码增强技术 和 运行时类重载技术： ./ch02-compileandbytecode/image/1726240249351.png 因为已经了解到字节码指令了，因此，我们就可以对字节码文件进行编辑，让字节码文件操作 jvm 完成某项功能。这就是所谓的字节码增强技术。</p><p>由于字节码增强技术只能用于操作字节码文件，对于已经加载到 jvm 中的 class 类对象，并没有办法进行操作，因此 jvm 对外提供了一整套的 api，可以用来专门解决这个问题。这一套 API 就是运行时类重载技术。</p><p>为什么要了解字节码？</p><ol><li>有利于编写更加高效，性能更高的程序；</li><li>通过修改字节码来调整程序行为；</li><li>对于了解一些利用字节码相关技术完成软件功能的实现原理有帮助，如了解 AOP 的实现原理、Profiler 的实现原理、Mock 框架的实现原理等；</li><li>热部署、性能诊断工具等；</li></ol><h3 id="_2-查看-class-文件的方法" tabindex="-1"><a class="header-anchor" href="#_2-查看-class-文件的方法" aria-hidden="true">#</a> 2. 查看 class 文件的方法</h3><ol><li>javap 进行反编译；</li><li>idea 中的 show bytecode；</li><li>idea 插件中的 jclasslib 插件包；</li><li>arths</li></ol><h3 id="_3-appendix-指令集" tabindex="-1"><a class="header-anchor" href="#_3-appendix-指令集" aria-hidden="true">#</a> 3. Appendix：指令集</h3><p>字节码指令根据功能、属性不同，可以分为11大类。下面附上字节码指令的分类，用于简单、临时查看，字节码指令的详细介绍，还需要查看官网的介绍。</p>',12),A=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"00"),l("td",null,"0x00"),l("td",null,"nop"),l("td",null,"什么都不做")]),l("tr",null,[l("td",null,"01"),l("td",null,"0x01"),l("td",null,"aconst_null"),l("td",null,"把 null 推到操作数栈")]),l("tr",null,[l("td",null,"02"),l("td",null,"0x02"),l("td",null,"iconst_m1"),l("td",null,"把 int 常量 –1 推到操作数栈")]),l("tr",null,[l("td",null,"03"),l("td",null,"0x03"),l("td",null,"iconst_0"),l("td",null,"把 int 常量 0 推到操作数栈")]),l("tr",null,[l("td",null,"04"),l("td",null,"0x04"),l("td",null,"iconst_1"),l("td",null,"把 int 常量 1 推到操作数栈")]),l("tr",null,[l("td",null,"05"),l("td",null,"0x05"),l("td",null,"iconst_2"),l("td",null,"把 int 常量 2 推到操作数栈")]),l("tr",null,[l("td",null,"06"),l("td",null,"0x06"),l("td",null,"iconst_3"),l("td",null,"把 int 常量 3 推到操作数栈")]),l("tr",null,[l("td",null,"07"),l("td",null,"0x07"),l("td",null,"iconst_4"),l("td",null,"把 int 常量 4 推到操作数栈")]),l("tr",null,[l("td",null,"08"),l("td",null,"0x08"),l("td",null,"iconst_5"),l("td",null,"把 int 常量 5 推到操作数栈")]),l("tr",null,[l("td",null,"09"),l("td",null,"0x09"),l("td",null,"lconst_0"),l("td",null,"把 long 常量 0 推到操作数栈")]),l("tr",null,[l("td",null,"10"),l("td",null,"0x0A"),l("td",null,"lconst_1"),l("td",null,"把 long 常量 1 推到操作数栈")]),l("tr",null,[l("td",null,"11"),l("td",null,"0x0B"),l("td",null,"fconst_0"),l("td",null,"把 float 常量 0 推到操作数栈")]),l("tr",null,[l("td",null,"12"),l("td",null,"0x0C"),l("td",null,"fconst_1"),l("td",null,"把 float 常量 1 推到操作数栈")]),l("tr",null,[l("td",null,"13"),l("td",null,"0x0D"),l("td",null,"fconst_2"),l("td",null,"把 float 常量 2 推到操作数栈")]),l("tr",null,[l("td",null,"14"),l("td",null,"0x0E"),l("td",null,"dconst_0"),l("td",null,"把 double 常量 0 推到操作数栈")]),l("tr",null,[l("td",null,"15"),l("td",null,"0x0F"),l("td",null,"dconst_1"),l("td",null,"把 double 常量 1 推到操作数栈")]),l("tr",null,[l("td",null,"16"),l("td",null,"0x10"),l("td",null,"bipush"),l("td",null,"把单字节常量（-128~127）推到操作数栈")]),l("tr",null,[l("td",null,"17"),l("td",null,"0x11"),l("td",null,"sipush"),l("td",null,"把 short 常量（-32768~32767）推到操作数栈")]),l("tr",null,[l("td",null,"18"),l("td",null,"0x12"),l("td",null,"ldc"),l("td",null,"把常量池中的int，float，String型常量取出并推到操作数栈顶")]),l("tr",null,[l("td",null,"19"),l("td",null,"0x13"),l("td",null,"ldc_w"),l("td",null,"把常量池中的int，float，String型常量取出并推到操作数栈顶（宽索引）")]),l("tr",null,[l("td",null,"20"),l("td",null,"0x14"),l("td",null,"ldc2_w"),l("td",null,"把常量池中的long，double型常量取出并推到操作数栈顶（宽索引）")])])],-1),y=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"21"),l("td",null,"0x15"),l("td",null,"iload"),l("td",null,"把 int 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"22"),l("td",null,"0x16"),l("td",null,"lload"),l("td",null,"把 long 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"23"),l("td",null,"0x17"),l("td",null,"fload"),l("td",null,"把 float 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"24"),l("td",null,"0x18"),l("td",null,"dload"),l("td",null,"把 double 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"25"),l("td",null,"0x19"),l("td",null,"aload"),l("td",null,"把引用型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"26"),l("td",null,"0x1A"),l("td",null,"iload_0"),l("td",null,"把局部变量第 1 个 int 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"27"),l("td",null,"0x1B"),l("td",null,"iload_1"),l("td",null,"把局部变量第 2 个 int 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"28"),l("td",null,"0x1C"),l("td",null,"iload_2"),l("td",null,"把局部变量第 3 个 int 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"29"),l("td",null,"0x1D"),l("td",null,"iload_3"),l("td",null,"把局部变量第 4 个 int 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"30"),l("td",null,"0x1E"),l("td",null,"lload_0"),l("td",null,"把局部变量第 1 个 long 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"31"),l("td",null,"0x1F"),l("td",null,"lload_1"),l("td",null,"把局部变量第 2 个 long 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"32"),l("td",null,"0x20"),l("td",null,"lload_2"),l("td",null,"把局部变量第 3 个 long 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"33"),l("td",null,"0x21"),l("td",null,"lload_3"),l("td",null,"把局部变量第 4 个 long 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"34"),l("td",null,"0x22"),l("td",null,"fload_0"),l("td",null,"把局部变量第 1 个 float 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"35"),l("td",null,"0x23"),l("td",null,"fload_1"),l("td",null,"把局部变量第 2 个 float 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"36"),l("td",null,"0x24"),l("td",null,"fload_2"),l("td",null,"把局部变量第 3 个 float 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"37"),l("td",null,"0x25"),l("td",null,"fload_3"),l("td",null,"把局部变量第 4 个 float 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"38"),l("td",null,"0x26"),l("td",null,"dload_0"),l("td",null,"把局部变量第 1 个 double 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"39"),l("td",null,"0x27"),l("td",null,"dload_1"),l("td",null,"把局部变量第 2 个 double 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"40"),l("td",null,"0x28"),l("td",null,"dload_2"),l("td",null,"把局部变量第 3 个 double 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"41"),l("td",null,"0x29"),l("td",null,"dload_3"),l("td",null,"把局部变量第 4 个 double 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"42"),l("td",null,"0x2A"),l("td",null,"aload_0"),l("td",null,"把局部变量第 1 个引用型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"43"),l("td",null,"0x2B"),l("td",null,"aload_1"),l("td",null,"把局部变量第 2 个引用型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"44"),l("td",null,"0x2C"),l("td",null,"aload_2"),l("td",null,"把局部变量第 3 个引用型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"45"),l("td",null,"0x2D"),l("td",null,"aload_3"),l("td",null,"把局部变量第 4 个引用 型局部变量推到操作数栈")]),l("tr",null,[l("td",null,"46"),l("td",null,"0x2E"),l("td",null,"iaload"),l("td",null,"把 int 型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"47"),l("td",null,"0x2F"),l("td",null,"laload"),l("td",null,"把 long 型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"48"),l("td",null,"0x30"),l("td",null,"faload"),l("td",null,"把 float 型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"49"),l("td",null,"0x31"),l("td",null,"daload"),l("td",null,"把 double 型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"50"),l("td",null,"0x32"),l("td",null,"aaload"),l("td",null,"把引用型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"51"),l("td",null,"0x33"),l("td",null,"baload"),l("td",null,"把 boolean或byte型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"52"),l("td",null,"0x34"),l("td",null,"caload"),l("td",null,"把 char 型数组指定索引的值推到操作数栈")]),l("tr",null,[l("td",null,"53"),l("td",null,"0x35"),l("td",null,"saload"),l("td",null,"把 short 型数组指定索引的值推到操作数栈")])])],-1),C=l("p",null,null,-1),B=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"54"),l("td",null,"0x36"),l("td",null,"istore"),l("td",null,"把栈顶 int 型数值存入指定局部变量")]),l("tr",null,[l("td",null,"55"),l("td",null,"0x37"),l("td",null,"lstore"),l("td",null,"把栈顶 long 型数值存入指定局部变量")]),l("tr",null,[l("td",null,"56"),l("td",null,"0x38"),l("td",null,"fstore"),l("td",null,"把栈顶 float 型数值存入指定局部变量")]),l("tr",null,[l("td",null,"57"),l("td",null,"0x39"),l("td",null,"dstore"),l("td",null,"把栈顶 double 型数值存入指定局部变量")]),l("tr",null,[l("td",null,"58"),l("td",null,"0x3A"),l("td",null,"astore"),l("td",null,"把栈顶引用型数值存入指定局部变量")]),l("tr",null,[l("td",null,"59"),l("td",null,"0x3B"),l("td",null,"istore_0"),l("td",null,"把栈顶 int 型数值存入第 1 个局部变量")]),l("tr",null,[l("td",null,"60"),l("td",null,"0x3C"),l("td",null,"istore_1"),l("td",null,"把栈顶 int 型数值存入第 2 个局部变量")]),l("tr",null,[l("td",null,"61"),l("td",null,"0x3D"),l("td",null,"istore_2"),l("td",null,"把栈顶 int 型数值存入第 3 个局部变量")]),l("tr",null,[l("td",null,"62"),l("td",null,"0x3E"),l("td",null,"istore_3"),l("td",null,"把栈顶 int 型数值存入第 4 个局部变量")]),l("tr",null,[l("td",null,"63"),l("td",null,"0x3F"),l("td",null,"lstore_0"),l("td",null,"把栈顶 long 型数值存入第 1 个局部变量")]),l("tr",null,[l("td",null,"64"),l("td",null,"0x40"),l("td",null,"lstore_1"),l("td",null,"把栈顶 long 型数值存入第 2 个局部变量")]),l("tr",null,[l("td",null,"65"),l("td",null,"0x41"),l("td",null,"lstore_2"),l("td",null,"把栈顶 long 型数值存入第 3 个局部变量")]),l("tr",null,[l("td",null,"66"),l("td",null,"0x42"),l("td",null,"lstore_3"),l("td",null,"把栈顶 long 型数值存入第 4 个局部变量")]),l("tr",null,[l("td",null,"67"),l("td",null,"0x43"),l("td",null,"fstore_0"),l("td",null,"把栈顶 float 型数值存入第 1 个局部变量")]),l("tr",null,[l("td",null,"68"),l("td",null,"0x44"),l("td",null,"fstore_1"),l("td",null,"把栈顶 float 型数值存入第 2 个局部变量")]),l("tr",null,[l("td",null,"69"),l("td",null,"0x45"),l("td",null,"fstore_2"),l("td",null,"把栈顶 float 型数值存入第 3 个局部变量")]),l("tr",null,[l("td",null,"70"),l("td",null,"0x46"),l("td",null,"fstore_3"),l("td",null,"把栈顶 float 型数值存入第 4 个局部变量")]),l("tr",null,[l("td",null,"71"),l("td",null,"0x47"),l("td",null,"dstore_0"),l("td",null,"把栈顶 double 型数值存入第 1 个局部变量")]),l("tr",null,[l("td",null,"72"),l("td",null,"0x48"),l("td",null,"dstore_1"),l("td",null,"把栈顶 double 型数值存入第 2 个局部变量")]),l("tr",null,[l("td",null,"73"),l("td",null,"0x49"),l("td",null,"dstore_2"),l("td",null,"把栈顶 double 型数值存入第 3 个局部变量")]),l("tr",null,[l("td",null,"74"),l("td",null,"0x4A"),l("td",null,"dstore_3"),l("td",null,"把栈顶 double 型数值存入第 4 个局部变量")]),l("tr",null,[l("td",null,"75"),l("td",null,"0x4B"),l("td",null,"astore_0"),l("td",null,"把栈顶 引用 型数值存入第 1 个局部变量")]),l("tr",null,[l("td",null,"76"),l("td",null,"0x4C"),l("td",null,"astore_1"),l("td",null,"把栈顶 引用 型数值存入第 2 个局部变量")]),l("tr",null,[l("td",null,"77"),l("td",null,"0x4D"),l("td",null,"astore_2"),l("td",null,"把栈顶 引用 型数值存入第 3 个局部变量")]),l("tr",null,[l("td",null,"78"),l("td",null,"0x4E"),l("td",null,"astore_3"),l("td",null,"把栈顶 引用 型数值存入第 4 个局部变量")]),l("tr",null,[l("td",null,"79"),l("td",null,"0x4F"),l("td",null,"iastore"),l("td",null,"把栈顶 int 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"80"),l("td",null,"0x50"),l("td",null,"lastore"),l("td",null,"把栈顶 long 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"81"),l("td",null,"0x51"),l("td",null,"fastore"),l("td",null,"把栈顶 float 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"82"),l("td",null,"0x52"),l("td",null,"dastore"),l("td",null,"把栈顶 double 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"83"),l("td",null,"0x53"),l("td",null,"aastore"),l("td",null,"把栈顶 引用 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"84"),l("td",null,"0x54"),l("td",null,"bastore"),l("td",null,"把栈顶 boolean or byte 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"85"),l("td",null,"0x55"),l("td",null,"castore"),l("td",null,"把栈顶 char 型数值存入数组指定索引位置")]),l("tr",null,[l("td",null,"86"),l("td",null,"0x56"),l("td",null,"sastore"),l("td",null,"把栈顶 short 型数值存入数组指定索引位置")])])],-1),w=l("p",null,null,-1),j=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"87"),l("td",null,"0x57"),l("td",null,"pop"),l("td",null,"把栈顶数值弹出（非long，double数值）")]),l("tr",null,[l("td",null,"88"),l("td",null,"0x58"),l("td",null,"pop2"),l("td",null,"把栈顶的一个long或double值弹出，或弹出2个其他类型数值")]),l("tr",null,[l("td",null,"89"),l("td",null,"0x59"),l("td",null,"dup"),l("td",null,"复制栈顶数值并把数值入栈")]),l("tr",null,[l("td",null,"90"),l("td",null,"0x5A"),l("td",null,"dup_x1"),l("td",null,"复制栈顶数值并将两个复制值压入栈顶")]),l("tr",null,[l("td",null,"91"),l("td",null,"0x5B"),l("td",null,"dup_x2"),l("td",null,"复制栈顶数值并将三个（或两个）复制值压入栈顶")]),l("tr",null,[l("td",null,"92"),l("td",null,"0x5C"),l("td",null,"dup2"),l("td",null,"复制栈顶一个（long 或double 类型的)或两个（其它）数值并将复制值压入栈顶")]),l("tr",null,[l("td",null,"93"),l("td",null,"0x5D"),l("td",null,"dup2_x1"),l("td",null,"dup_x1 指令的双倍版本")]),l("tr",null,[l("td",null,"94"),l("td",null,"0x5E"),l("td",null,"dup2_x2"),l("td",null,"dup_x2 指令的双倍版本")]),l("tr",null,[l("td",null,"95"),l("td",null,"0x5F"),l("td",null,"swap"),l("td",null,"把栈顶端的两个数的值交换（数值不能是long 或double 类型< td >的）")])])],-1),E=l("p",null,null,-1),N=l("p",null,"Java 虚拟机在处理浮点数运算时，不会抛出任何运行时异常，当一个操作产生溢出时，将会使用有符号的无穷大来表示，如果某个操作结果没有明确的数学定义的话，将会使用 NaN 值来表示。所有使用 NaN 值作为操作数的算术操作，结果都会返回 NaN。",-1),k=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"96"),l("td",null,"0x60"),l("td",null,"iadd"),l("td",null,"把栈顶两个 int 型数值相加并将结果入栈")]),l("tr",null,[l("td",null,"97"),l("td",null,"0x61"),l("td",null,"ladd"),l("td",null,"把栈顶两个 long 型数值相加并将结果入栈")]),l("tr",null,[l("td",null,"98"),l("td",null,"0x62"),l("td",null,"fadd"),l("td",null,"把栈顶两个 float 型数值相加并将结果入栈")]),l("tr",null,[l("td",null,"99"),l("td",null,"0x63"),l("td",null,"dadd"),l("td",null,"把栈顶两个 double 型数值相加并将结果入栈")]),l("tr",null,[l("td",null,"100"),l("td",null,"0x64"),l("td",null,"isub"),l("td",null,"把栈顶两个 int 型数值相减并将结果入栈")]),l("tr",null,[l("td",null,"101"),l("td",null,"0x65"),l("td",null,"lsub"),l("td",null,"把栈顶两个 long 型数值相减并将结果入栈")]),l("tr",null,[l("td",null,"102"),l("td",null,"0x66"),l("td",null,"fsub"),l("td",null,"把栈顶两个 float 型数值相减并将结果入栈")]),l("tr",null,[l("td",null,"103"),l("td",null,"0x67"),l("td",null,"dsub"),l("td",null,"把栈顶两个 double 型数值相减并将结果入栈")]),l("tr",null,[l("td",null,"104"),l("td",null,"0x68"),l("td",null,"imul"),l("td",null,"把栈顶两个 int 型数值相乘并将结果入栈")]),l("tr",null,[l("td",null,"105"),l("td",null,"0x69"),l("td",null,"lmul"),l("td",null,"把栈顶两个 long 型数值相乘并将结果入栈")]),l("tr",null,[l("td",null,"106"),l("td",null,"0x6A"),l("td",null,"fmul"),l("td",null,"把栈顶两个 float 型数值相乘并将结果入栈")]),l("tr",null,[l("td",null,"107"),l("td",null,"0x6B"),l("td",null,"dmul"),l("td",null,"把栈顶两个 double 型数值相乘并将结果入栈")]),l("tr",null,[l("td",null,"108"),l("td",null,"0x6C"),l("td",null,"idiv"),l("td",null,"把栈顶两个 int 型数值相除并将结果入栈")]),l("tr",null,[l("td",null,"109"),l("td",null,"0x6D"),l("td",null,"ldiv"),l("td",null,"把栈顶两个 long 型数值相除并将结果入栈")]),l("tr",null,[l("td",null,"110"),l("td",null,"0x6E"),l("td",null,"fdiv"),l("td",null,"把栈顶两个 float 型数值相除并将结果入栈")]),l("tr",null,[l("td",null,"111"),l("td",null,"0x6F"),l("td",null,"ddiv"),l("td",null,"把栈顶两个 double 型数值相除并将结果入栈")]),l("tr",null,[l("td",null,"112"),l("td",null,"0x70"),l("td",null,"irem"),l("td",null,"把栈顶两个 int 型数值模运算并将结果入栈")]),l("tr",null,[l("td",null,"113"),l("td",null,"0x71"),l("td",null,"lrem"),l("td",null,"把栈顶两个 long 型数值模运算并将结果入栈")]),l("tr",null,[l("td",null,"114"),l("td",null,"0x72"),l("td",null,"frem"),l("td",null,"把栈顶两个 float 型数值模运算并将结果入栈")]),l("tr",null,[l("td",null,"115"),l("td",null,"0x73"),l("td",null,"drem"),l("td",null,"把栈顶两个 double 型数值模运算并将结果入栈")]),l("tr",null,[l("td",null,"116"),l("td",null,"0x74"),l("td",null,"ineg"),l("td",null,"把栈顶 int 型数值取负并将结果入栈")]),l("tr",null,[l("td",null,"117"),l("td",null,"0x75"),l("td",null,"lneg"),l("td",null,"把栈顶 long 型数值取负并将结果入栈")]),l("tr",null,[l("td",null,"118"),l("td",null,"0x76"),l("td",null,"fneg"),l("td",null,"把栈顶 float 型数值取负并将结果入栈")]),l("tr",null,[l("td",null,"119"),l("td",null,"0x77"),l("td",null,"dneg"),l("td",null,"把栈顶 double 型数值取负并将结果入栈")]),l("tr",null,[l("td",null,"120"),l("td",null,"0x78"),l("td",null,"ishl"),l("td",null,"把 int 型数左移指定位数并将结果入栈")]),l("tr",null,[l("td",null,"121"),l("td",null,"0x79"),l("td",null,"lshl"),l("td",null,"把 long 型数左移指定位数并将结果入栈")]),l("tr",null,[l("td",null,"122"),l("td",null,"0x7A"),l("td",null,"ishr"),l("td",null,"把 int 型数右移指定位数并将结果入栈（有符号）")]),l("tr",null,[l("td",null,"123"),l("td",null,"0x7B"),l("td",null,"lshr"),l("td",null,"把 long 型数右移指定位数并将结果入栈（有符号）")]),l("tr",null,[l("td",null,"124"),l("td",null,"0x7C"),l("td",null,"iushr"),l("td",null,"把 int 型数右移指定位数并将结果入栈（无符号）")]),l("tr",null,[l("td",null,"125"),l("td",null,"0x7D"),l("td",null,"lushr"),l("td",null,"把 long 型数右移指定位数并将结果入栈（无符号）")]),l("tr",null,[l("td",null,"126"),l("td",null,"0x7E"),l("td",null,"iand"),l("td",null,"把栈顶两个 int 型数值 按位与 并将结果入栈")]),l("tr",null,[l("td",null,"127"),l("td",null,"0x7F"),l("td",null,"land"),l("td",null,"把栈顶两个 long 型数值 按位与 并将结果入栈")]),l("tr",null,[l("td",null,"128"),l("td",null,"0x80"),l("td",null,"ior"),l("td",null,"把栈顶两个 int 型数值 按位或 并将结果入栈")]),l("tr",null,[l("td",null,"129"),l("td",null,"0x81"),l("td",null,"lor"),l("td",null,"把栈顶两个 long 型数值 按或与 并将结果入栈")]),l("tr",null,[l("td",null,"130"),l("td",null,"0x82"),l("td",null,"ixor"),l("td",null,"把栈顶两个 int 型数值 按位异或 并将结果入栈")]),l("tr",null,[l("td",null,"131"),l("td",null,"0x83"),l("td",null,"lxor"),l("td",null,"把栈顶两个 long 型数值 按位异或 并将结果入栈")]),l("tr",null,[l("td",null,"132"),l("td",null,"0x84"),l("td",null,"iinc"),l("td",null,"把指定 int 型增加指定值")])])],-1),F=l("p",null,null,-1),D=l("p",null,"类型转换指令可以将两种不同的数值类型进行相互转换，这些转换操作一般用于实现用户代码中的显示类型转换操作。 Java 虚拟机直接支持（即转换时无需显示的转换指令）小范围类型向大范围类型的安全转换，但在处理窄化类型转换时，必须显式使用转换指令来完成。",-1),J=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"133"),l("td",null,"0x85"),l("td",null,"i2l"),l("td",null,"把栈顶 int 强转 long 并入栈")]),l("tr",null,[l("td",null,"134"),l("td",null,"0x86"),l("td",null,"i2f"),l("td",null,"把栈顶 int 强转 float 并入栈")]),l("tr",null,[l("td",null,"135"),l("td",null,"0x87"),l("td",null,"i2d"),l("td",null,"把栈顶 int 强转 double 并入栈")]),l("tr",null,[l("td",null,"136"),l("td",null,"0x88"),l("td",null,"l2i"),l("td",null,"把栈顶 long 强转 int 并入栈")]),l("tr",null,[l("td",null,"137"),l("td",null,"0x89"),l("td",null,"l2f"),l("td",null,"把栈顶 long 强转 float 并入栈")]),l("tr",null,[l("td",null,"138"),l("td",null,"0x8A"),l("td",null,"l2d"),l("td",null,"把栈顶 long 强转 double 并入栈")]),l("tr",null,[l("td",null,"139"),l("td",null,"0x8B"),l("td",null,"f2i"),l("td",null,"把栈顶 float 强转 int 并入栈")]),l("tr",null,[l("td",null,"140"),l("td",null,"0x8C"),l("td",null,"f2l"),l("td",null,"把栈顶 float 强转 long 并入栈")]),l("tr",null,[l("td",null,"141"),l("td",null,"0x8D"),l("td",null,"f2d"),l("td",null,"把栈顶 float 强转 double 并入栈")]),l("tr",null,[l("td",null,"142"),l("td",null,"0x8E"),l("td",null,"d2i"),l("td",null,"把栈顶 double 强转 int 并入栈")]),l("tr",null,[l("td",null,"143"),l("td",null,"0x8F"),l("td",null,"d2l"),l("td",null,"把栈顶 double 强转 long 并入栈")]),l("tr",null,[l("td",null,"144"),l("td",null,"0x90"),l("td",null,"d2f"),l("td",null,"把栈顶 double 强转 float 并入栈")]),l("tr",null,[l("td",null,"145"),l("td",null,"0x91"),l("td",null,"i2b"),l("td",null,"把栈顶 int 强转 byte 并入栈")]),l("tr",null,[l("td",null,"146"),l("td",null,"0x92"),l("td",null,"i2c"),l("td",null,"把栈顶 int 强转 char 并入栈")]),l("tr",null,[l("td",null,"147"),l("td",null,"0x93"),l("td",null,"i2s"),l("td",null,"把栈顶 int 强转 short 并入栈")])])],-1),L=l("p",null,null,-1),S=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"148"),l("td",null,"0x94"),l("td",null,"lcmp"),l("td",null,"比较栈顶两long 型数值大小，并将结果（1，0，-1）压入栈顶")]),l("tr",null,[l("td",null,"149"),l("td",null,"0x95"),l("td",null,"fcmpl"),l("td",null,"比较栈顶两float 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为“NaN”时，将-1 压入栈顶")]),l("tr",null,[l("td",null,"150"),l("td",null,"0x96"),l("td",null,"fcmpg"),l("td",null,"比较栈顶两float 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为“NaN”时，将1 压入栈顶")]),l("tr",null,[l("td",null,"151"),l("td",null,"0x97"),l("td",null,"dcmpl"),l("td",null,"比较栈顶两double 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为“NaN”时，将-1 压入栈顶")]),l("tr",null,[l("td",null,"152"),l("td",null,"0x98"),l("td",null,"dcmpg"),l("td",null,"比较栈顶两double 型数值大小，并将结果（1，0，-1）压入栈顶；当其中一个数值为“NaN”时，将1 压入栈顶")]),l("tr",null,[l("td",null,"153"),l("td",null,"0x99"),l("td",null,"ifeq"),l("td",null,"当栈顶 int 型数值等于0时，跳转")]),l("tr",null,[l("td",null,"154"),l("td",null,"0x9A"),l("td",null,"ifne"),l("td",null,"当栈顶 int 型数值不等于0时，跳转")]),l("tr",null,[l("td",null,"155"),l("td",null,"0x9B"),l("td",null,"iflt"),l("td",null,"当栈顶 int 型数值小于0时，跳转")]),l("tr",null,[l("td",null,"156"),l("td",null,"0x9C"),l("td",null,"ifge"),l("td",null,"当栈顶 int 型数值大于等于0时，跳转")]),l("tr",null,[l("td",null,"157"),l("td",null,"0x9D"),l("td",null,"ifgt"),l("td",null,"当栈顶 int 型数值大于0时，跳转")]),l("tr",null,[l("td",null,"158"),l("td",null,"0x9E"),l("td",null,"ifle"),l("td",null,"当栈顶 int 型数值小于等于0时，跳转")]),l("tr",null,[l("td",null,"159"),l("td",null,"0x9F"),l("td",null,"if_icmpeq"),l("td",null,"比较栈顶两个 int 型数值，等于0时，跳转")]),l("tr",null,[l("td",null,"160"),l("td",null,"0xA0"),l("td",null,"if_icmpne"),l("td",null,"比较栈顶两个 int 型数值，不等于0时，跳转")]),l("tr",null,[l("td",null,"161"),l("td",null,"0xA1"),l("td",null,"if_icmplt"),l("td",null,"比较栈顶两个 int 型数值，小于0时，跳转")]),l("tr",null,[l("td",null,"162"),l("td",null,"0xA2"),l("td",null,"if_icmpge"),l("td",null,"比较栈顶两个 int 型数值，大于等于0时，跳转")]),l("tr",null,[l("td",null,"163"),l("td",null,"0xA3"),l("td",null,"if_icmpgt"),l("td",null,"比较栈顶两个 int 型数值，大于0时，跳转")]),l("tr",null,[l("td",null,"164"),l("td",null,"0xA4"),l("td",null,"if_icmple"),l("td",null,"比较栈顶两个 int 型数值，小于等于0时，跳转")]),l("tr",null,[l("td",null,"165"),l("td",null,"0xA5"),l("td",null,"if_acmpeq"),l("td",null,"比较栈顶两个 引用 型数值，相等时跳转")]),l("tr",null,[l("td",null,"166"),l("td",null,"0xA6"),l("td",null,"if_acmpne"),l("td",null,"比较栈顶两个 引用 型数值，不相等时跳转")])])],-1),I=l("p",null,null,-1),V=l("p",null,"控制转移指令可以让 Java 虚拟机有条件或无条件地从指定的位置指令而不是控制转移指令的下一条指令继续执行程序，从概念模型上理解，可以认为控制转移指令就是在有条件或无条件地修改 PC 寄存器的值。",-1),q=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"167"),l("td",null,"0xA7"),l("td",null,"goto"),l("td",null,"无条件分支跳转")]),l("tr",null,[l("td",null,"168"),l("td",null,"0xA8"),l("td",null,"jsr"),l("td",null,"跳转至指定16 位offset（bit） 位置，并将jsr 下一条指令地址压入栈顶")]),l("tr",null,[l("td",null,"169"),l("td",null,"0xA9"),l("td",null,"ret"),l("td",null,"返回至局部变量指定的index 的指令位置（一般与jsr，jsr_w联合使用）")]),l("tr",null,[l("td",null,"170"),l("td",null,"0xAA"),l("td",null,"tableswitch"),l("td",null,"用于switch 条件跳转，case 值连续（可变长度指令）")]),l("tr",null,[l("td",null,"171"),l("td",null,"0xAB"),l("td",null,"lookupswitch"),l("td",null,"用于switch 条件跳转，case 值不连续（可变长度指令）")]),l("tr",null,[l("td",null,"172"),l("td",null,"0xAC"),l("td",null,"ireturn"),l("td",null,"结束方法，并返回一个int 类型数据")]),l("tr",null,[l("td",null,"173"),l("td",null,"0xAD"),l("td",null,"lreturn"),l("td",null,"从当前方法返回 long")]),l("tr",null,[l("td",null,"174"),l("td",null,"0xAE"),l("td",null,"freturn"),l("td",null,"从当前方法返回 float")]),l("tr",null,[l("td",null,"175"),l("td",null,"0xAF"),l("td",null,"dreturn"),l("td",null,"从当前方法返回 double")]),l("tr",null,[l("td",null,"176"),l("td",null,"0xB0"),l("td",null,"areturn"),l("td",null,"从当前方法返回 对象引用")]),l("tr",null,[l("td",null,"177"),l("td",null,"0xB1"),l("td",null,"return"),l("td",null,"从当前方法返回 void")])])],-1),z=l("p",null,null,-1),M=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"178"),l("td",null,"0xB2"),l("td",null,"getstatic"),l("td",null,"获取指定类的静态域，并将其值压入栈顶")]),l("tr",null,[l("td",null,"179"),l("td",null,"0xB3"),l("td",null,"putstatic"),l("td",null,"为类的静态域赋值")]),l("tr",null,[l("td",null,"180"),l("td",null,"0xB4"),l("td",null,"getfield"),l("td",null,"获取指定类的实例域（对象的字段值），并将其值压入栈顶")]),l("tr",null,[l("td",null,"181"),l("td",null,"0xB5"),l("td",null,"putfield"),l("td",null,"为指定的类的实例域赋值")]),l("tr",null,[l("td",null,"182"),l("td",null,"0xB6"),l("td",null,"invokevirtual"),l("td",null,"调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），是Java语言中最常见的方法分派方式。")]),l("tr",null,[l("td",null,"183"),l("td",null,"0xB7"),l("td",null,"invokespecial"),l("td",null,"调用一些需要特殊处理的实例方法，包括实例初始化方法（）、私有方法和父类方法。这三类方法的调用对象在编译时就可以确定。")]),l("tr",null,[l("td",null,"184"),l("td",null,"0xB8"),l("td",null,"invokestatic"),l("td",null,"调用静态方法")]),l("tr",null,[l("td",null,"185"),l("td",null,"0xB9"),l("td",null,"invokeinterface"),l("td",null,"调用接口方法调，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。")]),l("tr",null,[l("td",null,"186"),l("td",null,"0xBA"),l("td",null,"invokedynamic"),l("td",null,"调用动态链接方法（该指令是指令是Java SE 7 中新加入的）。用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法，前面4条调用指令的分派逻辑都固化在Java虚拟机内部，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。")]),l("tr",null,[l("td",null,"187"),l("td",null,"0xBB"),l("td",null,"new"),l("td",null,"创建一个对象，并将其引用值压入栈顶")]),l("tr",null,[l("td",null,"188"),l("td",null,"0xBC"),l("td",null,"newarray"),l("td",null,"创建一个指定原始类型（如int、float、char……）的数组，并将其引用值压入栈顶")]),l("tr",null,[l("td",null,"189"),l("td",null,"0xBD"),l("td",null,"anewarray"),l("td",null,"创建一个引用型（如类，接口，数组）的数组，并将其引用值压入栈顶")]),l("tr",null,[l("td",null,"190"),l("td",null,"0xBE"),l("td",null,"arraylength"),l("td",null,"获得数组的长度值并压入栈顶")]),l("tr",null,[l("td",null,"191"),l("td",null,"0xBF"),l("td",null,"athrow"),l("td",null,"将栈顶的异常直接抛出。Java程序中显式抛出异常的操作（throw语句）都由athrow指令来实现，并且，在Java虚拟机中，处理异常（catch语句）不是由字节码指令来实现的，而是采用异常表来完成的。")]),l("tr",null,[l("td",null,"192"),l("td",null,"0xC0"),l("td",null,"checkcast"),l("td",null,"检验类型转换，检验未通过将抛出ClassCastException")]),l("tr",null,[l("td",null,"193"),l("td",null,"0xC1"),l("td",null,"instanceof"),l("td",null,"检验对象是否是指定的类的实例，如果是将1 压入栈顶，否则将0 压入栈顶")]),l("tr",null,[l("td",null,"194"),l("td",null,"0xC2"),l("td",null,"monitorenter"),l("td",null,"获取对象的monitor，用于同步块或同步方法")]),l("tr",null,[l("td",null,"195"),l("td",null,"0xC3"),l("td",null,"monitorexit"),l("td",null,"释放对象的monitor，用于同步块或同步方法")])])],-1),P=l("p",null,[o("Java 虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（Monitor）来支持的。 **方法级的同步是隐式的，即无须通过字节码指令来控制，它实现在方法调用和返回操作之中。**虚拟机可以从方法常量池的方法表结构中的 ACC_SYNCHRONIZED 方法标志得知一个方法是否声明为同步方法。当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那么这个同步方法所持有的管程将在异常抛到同步方法之外时自动释放。 "),l("strong",null,"同步一段指令集序列通常是由Java语言中的synchronized语句块来表示的，Java虚拟机的指令集中有monitorenter和monitorexit两条指令来支持synchronized关键字的语义"),o(" 编译器必须确保无论方法通过何种方式完成，方法中调用过的每条monitorenter指令都必须执行其对应的monitorexit指令，而无论这个方法是正常结束还是异常结束。")],-1),O=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"196"),l("td",null,"0xC4"),l("td",null,"wide"),l("td",null,"扩展访问局部变量表的索引宽度")]),l("tr",null,[l("td",null,"197"),l("td",null,"0xC5"),l("td",null,"multianewarray"),l("td",null,"创建指定类型和指定维度的多维数组（执行该指令时，操作栈中必须包含各维度的长度值），并将其引用值压入栈顶")]),l("tr",null,[l("td",null,"198"),l("td",null,"0xC6"),l("td",null,"ifnull"),l("td",null,"为 null 时跳转")]),l("tr",null,[l("td",null,"199"),l("td",null,"0xC7"),l("td",null,"ifnonnull"),l("td",null,"非 null 时跳转")]),l("tr",null,[l("td",null,"200"),l("td",null,"0xC8"),l("td",null,"goto_w"),l("td",null,"无条件跳转（宽索引）")]),l("tr",null,[l("td",null,"201"),l("td",null,"0xC9"),l("td",null,"jsr_w"),l("td",null,"跳转指定32bit偏移位置，并将jsr_w下一条指令地址入栈")])])],-1),R=l("p",null,null,-1),T=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"十进制"),l("th",null,"操作码"),l("th",null,"助记符"),l("th",null,"含义")])]),l("tbody",null,[l("tr",null,[l("td",null,"202"),l("td",null,"0xCA"),l("td",null,"breakpoint"),l("td",null,"调试时的断点")]),l("tr",null,[l("td",null,"254"),l("td",null,"0xFE"),l("td",null,"impdep1"),l("td",null,"用于在特定硬件中使用的语言后门")]),l("tr",null,[l("td",null,"255"),l("td",null,"0xFF"),l("td",null,"impdep2"),l("td",null,"用于在特定硬件中使用的语言后门")])])],-1),Y=l("p",null,null,-1),Z={href:"https://juejin.cn/post/7027707475503611940",target:"_blank",rel:"noopener noreferrer"},H=l("h3",{id:"_4-参考",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_4-参考","aria-hidden":"true"},"#"),o(" 4. 参考")],-1),W={href:"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.iload",target:"_blank",rel:"noopener noreferrer"},X={href:"https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html",target:"_blank",rel:"noopener noreferrer"};function $(G,K){const e=a("ExternalLinkIcon"),i=a("Tabs");return x(),c("div",null,[b,g,l("p",null,[l("a",m,[o("https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html"),r(e)])]),v,r(i,{id:"83",data:[{title:"Constants 常量相关"},{title:"Loads 加载相关"},{title:"Loads Store 存储相关"},{title:"Loads Stack 栈相关"},{title:"Loads Math 运算相关"},{title:"Loads Conversions 转换相关"},{title:"Loads Comparisons 比较相关"},{title:"Loads Control 控制相关"},{title:"Loads references 引用、方法、异常、同步相关"},{title:"Loads Extended 扩展相关"},{title:"Loads Reserved 保留指令"}]},{tab0:t(({title:n,value:u,isActive:d})=>[A]),tab1:t(({title:n,value:u,isActive:d})=>[y,C]),tab2:t(({title:n,value:u,isActive:d})=>[B,w]),tab3:t(({title:n,value:u,isActive:d})=>[j,E]),tab4:t(({title:n,value:u,isActive:d})=>[N,k,F]),tab5:t(({title:n,value:u,isActive:d})=>[D,J,L]),tab6:t(({title:n,value:u,isActive:d})=>[S,I]),tab7:t(({title:n,value:u,isActive:d})=>[V,q,z]),tab8:t(({title:n,value:u,isActive:d})=>[M,P]),tab9:t(({title:n,value:u,isActive:d})=>[O,R]),tab10:t(({title:n,value:u,isActive:d})=>[T,Y]),_:1}),l("blockquote",null,[l("p",null,[o("作者：刘Java 链接："),l("a",Z,[o("https://juejin.cn/post/7027707475503611940"),r(e)]),o(" 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])]),H,l("ul",null,[l("li",null,[l("a",W,[o("SE7-JVM Instruction Set"),r(e)])]),l("li",null,[l("a",X,[o("字节码文件结构"),r(e)])])])])}const U=s(p,[["render",$],["__file","ch02-compileandbytecode.html.vue"]]);export{U as default};
