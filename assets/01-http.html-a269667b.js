import{_ as l,W as r,X as s,Y as t,Z as e,$ as d,a0 as n,C as a}from"./framework-16b96b76.js";const o="/assets/1720625982915-2fc91394.png",c="/assets/1720644130052-686e0179.png",h="/assets/1726266179985-57d30f48.png",g="/assets/1726266191337-3c6e0f3a.png",p="/assets/1726266218513-fce2d0f3.png",u="/assets/1721262905149-0d84a5d3.png",f={},v=n('<h1 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h1><p>应用层主要讲解 HTTP 协议。</p><h2 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h2><ul><li>HTTP： HyperText Transfer Protocol， 超文本传输协议，表示可以传输多种数据格式，如文本信息、图片、音频、视频等；早期互联网只能传输文本信息，但是随着计算机技术的发展，需要展示图片、音频、视频的业务场景越来越多，所以叫超文本传输协议。</li><li><strong>URI</strong>：(Uniform Resource Identifier) 是<strong>统⼀资源标志符</strong>，由某个协议方法表示的资源的定位标识符，可以唯⼀标识⼀个资源，相当于要访问资源的“身份证号”。</li><li><strong>URL</strong>：(Uniform Resource Location) 是<strong>统⼀资源定位符</strong>，可以提供该资源的路径，相当于要访问资源的“家庭住址”。</li></ul><h2 id="常见的应用层软件" tabindex="-1"><a class="header-anchor" href="#常见的应用层软件" aria-hidden="true">#</a> 常见的应用层软件</h2><ul><li>浏览器，如 Chrome（谷歌浏览器）、Safari、IE；</li><li>邮件客户端</li><li>各类开发工具客户端，如 navicat、RedisDesktop、postman、</li><li>命令行工具： curl</li></ul><p>我们以在浏览器中访问某一个链接来从上至下来说明各个阶段的概念。</p><h2 id="url-的组成" tabindex="-1"><a class="header-anchor" href="#url-的组成" aria-hidden="true">#</a> URL 的组成</h2><p>各类常见的应用层软件中都有一个 URL 的东西，其形式为： <code>[http|https]://[域名]:[port]/[文档路径]</code> 。</p><figure><img src="'+o+'" alt="1720625982915" tabindex="0" loading="lazy"><figcaption>1720625982915</figcaption></figure><p>总的来说 URL 主要分为三个部分：</p><ul><li><code>请求协议</code>，常见的有 http、 https、 smtp、 ftp、telnet 等；</li><li><code>主机位置</code>，包括主机名称和端口号；</li><li><code>资源位置</code>，即要访问的资源在服务器上的文件路径；</li></ul>',12),b={href:"http://www.server.com/dir1/files.html**%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},m=t("li",null,"http ： 表示请求双方所采用的协议为 http 协议；",-1),T={href:"http://www.server.com",target:"_blank",rel:"noopener noreferrer"},x=t("li",null,"/dir1/files.html ： 表示资源是在服务器上的 dir1 文件夹下的 file1.html 文件；",-1),S=n('<h2 id="报文格式" tabindex="-1"><a class="header-anchor" href="#报文格式" aria-hidden="true">#</a> 报文格式</h2><figure><img src="'+c+`" alt="1720644130052" tabindex="0" loading="lazy"><figcaption>1720644130052</figcaption></figure><p>总结：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 请求报文与响应报文的格式相同
generic-message = start-line
                  *(message-header CRLF)     消息头
                  CRLF
                  [ message-body ]
start-line      = Request-Line | Status-Line

// **请求报文**中的 **消息头** 分为三个部分： 通用头 + 请求头 + 实体头
Request = Request-Line ; Section 5.1
*(( general-header ; Section 4.5            通用头
| request-header ; Section 5.3              请求头
| entity-header ) CRLF) ; Section 7.1       实体头
CRLF
[ message-body ] ; Section 4.3

// **响应报文**中的 **消息头** 分为三部分： 通用头 + 响应头 + 实体头
Response = Status-Line ; Section 6.1
*(( general-header ; Section 4.5            通用头
| response-header ; Section 6.2             响应头
| entity-header ) CRLF) ; Section 7.1       实体头
CRLF
[ message-body ] ; Section 7.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HTTP 协议报文有两类，一类是请求报文，一类是响应报文；这两类报文的格式都是： 开始行 + 消息头 + 消息体 的格式；</li><li><strong>请求报文</strong><ul><li>开始行（start-line=Request-Line，此时也称为请求行），格式为： 请求方法 + 空格 + URI + 空格 + HTTP 版本；</li><li>消息头（message-header， 此时也称为请求头），格式为 key: value 的形式，注意： 冒号后面有一个空格；并且请求头可以有多个；常见的有 Content-Type 等；</li><li>消息体（message-body）的具体格式由 消息头 中的 Content-Type 限制；</li></ul></li><li><strong>响应报文</strong><ul><li>开始行（start-line=Status-Line，此时也称为状态行），格式为： HTTP 版本 + 空格 + 状态码 + 空格 + 状态原语；</li><li>消息头（message-header）与请求报文中的消息头格式一致，只不过部分键值对有所区别；</li><li>消息体（message-body）也与请求报文中的消息体格式一致；</li></ul></li></ul>`,5),y={href:"http://files.blogjava.net/sunchaojin/http1.3.pdf",target:"_blank",rel:"noopener noreferrer"},P=n('<h2 id="消息头-message-header" tabindex="-1"><a class="header-anchor" href="#消息头-message-header" aria-hidden="true">#</a> 消息头（message-header）</h2><p>常见的 消息头 有：</p><table><thead><tr><th style="text-align:left;">消息头</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">Cache-Control</td><td></td></tr><tr><td style="text-align:left;">Date</td><td></td></tr><tr><td style="text-align:left;">Transfer-Encoding</td><td></td></tr><tr><td style="text-align:left;">Accept-Charset</td><td>能够接受的字符集</td></tr><tr><td style="text-align:left;">Accept-Encoding</td><td>能够接受的编码方式列表</td></tr><tr><td style="text-align:left;">Accept-Language</td><td>能够接受的回应内容的自然语言列表。</td></tr><tr><td style="text-align:left;">User-Agent</td><td>浏览器的浏览器身份标识字符串</td></tr><tr><td style="text-align:left;">Host</td><td>服务器的域名(用于虚拟主机 )，以及服务器所监听的传输控制协议端口号。如果所请求的端口是对应的服务的标准端口，则端口号可被省略。自超文件传输协议版本 1.1（HTTP/1.1）开始便是必需字段。</td></tr><tr><td style="text-align:left;">Range</td><td>仅请求某个实体的一部分。字节偏移以 0 开始。</td></tr><tr><td style="text-align:left;">Accept-Ranges</td><td>这个服务器支持哪些种类的部分内容范围</td></tr><tr><td style="text-align:left;">Age</td><td>这个对象在代理缓存中存在的时间，以秒为单位</td></tr><tr><td style="text-align:left;">Location</td><td>用来 进行重定向，或者在创建了某个新资源时使用。</td></tr><tr><td style="text-align:left;">Server</td><td>服务器的名字</td></tr><tr><td style="text-align:left;">Set-Cookie</td><td>设置 cookie</td></tr><tr><td style="text-align:left;">Content-Encoding</td><td>在数据上使用的编码类型。参考 超文本传输协议压缩 。</td></tr><tr><td style="text-align:left;">Content-Language</td><td>内容所使用的语言</td></tr><tr><td style="text-align:left;">Content-Type</td><td>当前内容的 MIME 类型</td></tr><tr><td style="text-align:left;">Expires</td><td>指定一个日期/时间，超过该时间则认为此回应已经过期</td></tr></tbody></table>',3),C={href:"https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5",target:"_blank",rel:"noopener noreferrer"},_=n(`<h2 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法" aria-hidden="true">#</a> 请求方法</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Method = &quot;OPTIONS&quot; ; Section 9.2
| &quot;GET&quot; ; Section 9.3
| &quot;HEAD&quot; ; Section 9.4
| &quot;POST&quot; ; Section 9.5
| &quot;PUT&quot; ; Section 9.6
| &quot;DELETE&quot; ; Section 9.7
| &quot;TRACE&quot; ; Section 9.8
| &quot;CONNECT&quot; ; Section 9.9
| extension-method
extension-method = token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td>向特定资源发送请求，查询数据，并返回实体</td></tr><tr><td style="text-align:left;">POST</td><td>向指定资源提交数据进行处理请求，可能会导致新的资源建立、已有资源修改</td></tr><tr><td style="text-align:left;">PUT</td><td>向服务器上传新的内容</td></tr><tr><td style="text-align:left;">DELETE</td><td>请求服务器删除指定标识的资源</td></tr><tr><td style="text-align:left;">HEAD</td><td>类似 GET 请求，返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td style="text-align:left;"><strong>OPTIONS</strong></td><td>可以用来向服务器发送请求来测试服务器的功能性</td></tr><tr><td style="text-align:left;">TRACE</td><td>回显服务器收到的请求，用于测试或诊断</td></tr><tr><td style="text-align:left;">CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table><p><strong>get 和 Post 区别</strong>：</p><table><thead><tr><th></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>可见性</td><td>数据在 URL 中，所有人可见</td><td>数据不会显示在 URL 中</td></tr><tr><td>安全性</td><td>与 post 相比，get 的安全性较差，因为所发送的数据是 URL 的一部分</td><td>安全，因为参数不会被保存在浏览器历史或 web 服务器日志中</td></tr><tr><td>数据长度</td><td>受限制，最长 2kb</td><td>无限制</td></tr><tr><td>编码类型</td><td><code>Content-type: application/x-www-form-urlencoded</code></td><td><code>Content-type: multipart/form-data</code></td></tr><tr><td>缓存</td><td>能被缓存</td><td>不能被缓存</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">OPTIONS 预请求 与 跨域</p><figure><img src="`+h+'" alt="1726266179985" tabindex="0" loading="lazy"><figcaption>1726266179985</figcaption></figure><figure><img src="'+g+'" alt="1726266191337" tabindex="0" loading="lazy"><figcaption>1726266191337</figcaption></figure><figure><img src="'+p+`" alt="1726266218513" tabindex="0" loading="lazy"><figcaption>1726266218513</figcaption></figure></div><h2 id="响应状态" tabindex="-1"><a class="header-anchor" href="#响应状态" aria-hidden="true">#</a> 响应状态</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1xx: Informational - Request received, continuing process
2xx: Success - The action was successfully received, understood, and accepted
3xx: Redirection - Further action must be taken in order to complete the request
4xx: Client Error - The request contains bad syntax or cannot be fulfilled
5xx: Server Error - The server failed to fulfill an apparently valid request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见状态码及其描述：</p><table><thead><tr><th style="text-align:left;">状态码</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">100：Continue</td><td>继续。客户端应继续其请求。</td></tr><tr><td style="text-align:left;">200：OK</td><td>请求成功。一般用于 GET 与 POST 请求。</td></tr><tr><td style="text-align:left;">301：Moved Permanently</td><td>永久重定向。</td></tr><tr><td style="text-align:left;">302：Found</td><td>暂时重定向。</td></tr><tr><td style="text-align:left;">400：Bad Request</td><td>客户端请求的语法错误，服务器无法理解。</td></tr><tr><td style="text-align:left;">403：Forbideen</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求。</td></tr><tr><td style="text-align:left;">404：Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。</td></tr><tr><td style="text-align:left;">500：Internal Server Error</td><td>服务器内部错误，无法完成请求。</td></tr><tr><td style="text-align:left;">502：Bad Gateway</td><td>作为网关或者代理服务器尝试执行请求时，从远程服务器接收到了无效的响应。</td></tr></tbody></table><h2 id="长链接、短链接" tabindex="-1"><a class="header-anchor" href="#长链接、短链接" aria-hidden="true">#</a> 长链接、短链接</h2><p>在 HTTP 早期版本中，客户端与服务器每进行一次通信，就会建立一个新的<code>连接</code>，<code>连接</code>在通信结束后随即销毁。这种 HTTP 的连接方式被称为 <code>短链接</code> 的方式。</p><p><code>短链接</code> 事实上是通过传输层的 TCP 协议控制的，也就是说，客户端与服务器的每一次通信，都要经过 <code>三次握手</code> 和 <code>四次挥手</code> 。</p><p>可以看出： <code>短链接</code> 是有问题的。比如，一次通信过程中要请求一个 html 页面，这个 html 页面上有多个图片，那么<code>短链接</code>的方式就会创建多个<code>连接</code>，这就会产生频繁的创建和销毁的问题，频繁的创建和销毁，会对网络带宽等稀缺的服务器资源损耗很大，进而影响服务器的整体性能。</p><p>于是，从「 HTTP/1.1 」起，HTTP 的消息头信息中加入了 <strong>Connection: keep-alive</strong> 字段，解决了这个问题，让 HTTP 可以复用已经创建的连接资源。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>事实上， HTTP 协议的长连接和短连接，就是 TCP 协议的长连接和短连接。</p></div><h2 id="有状态、无状态、cookie-与-session" tabindex="-1"><a class="header-anchor" href="#有状态、无状态、cookie-与-session" aria-hidden="true">#</a> 有状态、无状态、Cookie 与 Session</h2><blockquote><p>所谓 有状态 和 无状态 是指，在整个通信过程中，服务器能否记住客户端的状态。</p><p>有状态： 就是服务器端能够知道请求 A 是来自于客户端 a，不是来自于客户端 b； 无状态： 就是服务器端并不知道哪个请求来自于哪个客户端；</p></blockquote><p>服务端往往接受来自 n 个客户端的请求，为减少各项资源的开销，HTTP 协议被设计成无状态协议。也就是说服务端并不知道哪个请求属于哪个客户端，因此要额外的技术手段来保证客户端的会话信息。</p><p>起先解决会话的问题的方式是，让每一个客户端的每一次请求都携带上自己的相关信息，但是这种方式会造成额外的性能损耗。</p><p>因此，后来又出现了 Cookie 的技术和 Session 的技术。</p><p>HTTP 协议属于无状态协议的，这种设计还是为了减轻性能损耗。但是这种方式也有弊端。那就是客户端必须每次都要携带能够标识自己身份的信息给到服务器端，这又造成了额外的性能损耗。</p><p>于是就产生了 Cookie 和 Session 的解决方案。</p><div class="hint-container tip"><p class="hint-container-title">举例说明</p><p>比如，某一个 OA 系统，每个员工都要登录系统进行打卡。业务逻辑是，先登录系统，然后再点击打卡按钮，并且要想打卡成功，就必须要先登录系统。</p><p>但是由于 HTTP 是无状态的，因此服务器端并不知道员工是否登录。</p><p>有了 Cookie 和 Session 后，在登录后的响应请求中，服务器就会对员工的用户的相关信息保存到服务器本地的 Session 列表中，然后再返回客户端一个 cookie 的 id，客户端把接收到的 cookie 的 id 存放到本地，后面员工执行打卡请求，就携带这个 cookie-id 给到服务器，服务器拿到整个 cookie-id 去保存的 session 列表中查询，就可以判断用户已经完成登录了。</p></div><p>Cookie 和 Session 都是用来跟踪浏览器用户身份的会话方式，但两者有所区别：</p><ul><li><strong>作用范围不同</strong>，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li><strong>存取方式的不同</strong>，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li><strong>有效期不同</strong>，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li><strong>隐私策略不同</strong>，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li><strong>存储大小不同</strong>， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul><p>分布式 Session 的问题： 在互联网公司为了可以支撑更大的流量，后端往往需要多台服务器共同来支撑前端用户请求，那如果用户在 A 服务器登录了，第二次请求跑到服务 B 就会出现登录失效问题。</p><p>分布式 Session 一般会有以下几种解决方案：</p><ul><li><strong>客户端存储</strong>：直接将信息存储在 cookie 中，cookie 是存储在客户端上的一小段数据，客户端通过 http 协议和服务器进行 cookie 交互，通常用来存储一些不敏感信息</li><li><strong>Nginx ip_hash 策略</strong>：服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</li><li><strong>Session 复制</strong>：任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点。</li><li><strong>共享 Session</strong>：服务端无状态话，将用户的 Session 等信息使用缓存中间件（如 Redis）来统一管理，保障分发到每一个服务器的响应结果都一致。</li><li>生产实践： 建议采用共享 Session 的方案。</li></ul><h2 id="重定向和转发" tabindex="-1"><a class="header-anchor" href="#重定向和转发" aria-hidden="true">#</a> 重定向和转发</h2><p><strong>重定向（Redirect）</strong> 和 <strong>转发（Forward）</strong> 是 Web 开发中常见的两种请求处理方式，它们用于控制客户端请求的跳转和响应方式。虽然它们都能实现页面跳转，但其背后的机制和适用场景有所不同。</p><table><thead><tr><th>比较点</th><th>重定向（Redirect）</th><th>转发（Forward）</th></tr></thead><tbody><tr><td>HTTP 请求次数</td><td>两次（客户端发起两次请求）</td><td>一次（服务器内部转发）</td></tr><tr><td>URL 变化</td><td>客户端 URL 会改变</td><td>URL 保持不变</td></tr><tr><td>是否跨域</td><td>可以跨域</td><td>不能跨域，必须在同一个应用内部</td></tr><tr><td>数据传递</td><td>不能通过请求对象传递数据，必须使用参数或 Session</td><td>可以通过请求对象传递数据（Request 对象）</td></tr><tr><td>性能开销</td><td>由于发起了新的请求，性能开销较大</td><td>没有额外的请求，性能较好</td></tr><tr><td>适用场景</td><td>跳转到其他网站或其他应用，防止表单重复提交，跨域跳转</td><td>在同一个应用内，多个组件协同处理同一个请求</td></tr></tbody></table><ul><li><strong>重定向</strong>：适用于需要通知客户端（浏览器）跳转，并且可能跳转到不同域名或服务器的情况，适合跨域或跨应用的跳转。</li><li><strong>转发</strong>：适用于服务器内部的跳转，在同一请求的上下文中进行，不会改变浏览器地址栏，适合同一个 Web 应用内的页面协作。</li></ul><h2 id="http-版本迭代" tabindex="-1"><a class="header-anchor" href="#http-版本迭代" aria-hidden="true">#</a> HTTP 版本迭代</h2><table><thead><tr><th></th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>端口</td><td>80</td><td>443</td></tr><tr><td>安全性</td><td>无加密，安全性较差</td><td>有加密机制，安全性较高</td></tr><tr><td>资源消耗</td><td>较少</td><td>由于加密处理，资源消耗更多</td></tr><tr><td>是否需要证书</td><td>不需要</td><td>需要</td></tr><tr><td>协议</td><td>运行在 TCP 协议之上</td><td>运行在 SSL 协议之上，SSL 运行在 TCP 协议之上</td></tr></tbody></table><ol><li><p>版本迭代</p><ul><li><strong>HTTP1.0</strong>：服务器处理完成后立即断开 TCP 连接（<strong>无连接</strong>），服务器不跟踪每个客户端也不记录过去的请求（<strong>无状态</strong>）</li><li><strong>HTTP1.1</strong>：KeepAlived<strong>长连接</strong>避免了连接建立和释放的开销；通过 Content-Length 来判断当前请求数据是否已经全部接受（<strong>有状态</strong>）</li><li><strong>HTTP2.0</strong>：引入二进制数据帧和流的概念，其中帧对数据进行顺序标识；因为有了序列，服务器可以<strong>并行</strong>的传输数据。</li></ul></li><li><p><strong>http1.0 和 http1.1 的主要区别如下</strong></p><ul><li>缓存处理：1.1 添加更多的缓存控制策略（如：Entity tag，If-Match）</li><li>网络连接的优化：1.1 支持断点续传</li><li>错误状态码的增多：1.1 新增了 24 个错误状态响应码，丰富的错误码更加明确各个状态</li><li>Host 头处理：支持 Host 头域，不在以 IP 为请求方标志</li><li>长连接：减少了建立和关闭连接的消耗和延迟。</li></ul></li><li><p><strong>http1.1 和 http2.0 的主要区别</strong></p><ul><li>新的传输格式：2.0 使用二进制格式，1.0 依然使用基于文本格式</li><li>多路复用：连接共享，不同的 request 可以使用同一个连接传输（最后根据每个 request 上的 id 号组合成正常的请求）</li><li>header 压缩：由于 1.X 中 header 带有大量的信息，并且得重复传输，2.0 使用 encoder 来减少需要传输的 hearder 大小</li><li>服务端推送：同 google 的 SPDUY（1.0 的一种升级）一样</li></ul></li></ol><h2 id="https-的原理及过程" tabindex="-1"><a class="header-anchor" href="#https-的原理及过程" aria-hidden="true">#</a> HTTPS 的原理及过程</h2><figure><img src="`+u+'" alt="1721262905149" tabindex="0" loading="lazy"><figcaption>1721262905149</figcaption></figure><p>加密流程按图中的序号分为：</p><ol><li>客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的 80 端口)。</li><li>采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。</li><li>服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。</li><li>客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥 A。然后客户端还会生成一个随机码 KEY，并使用公钥 A 将其加密。</li><li>客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。</li><li>服务器在收到随机码 KEY 之后会使用私钥 B 将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。</li><li>服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。</li><li>双方使用对称加密愉快地传输所有数据。</li></ol><h2 id="应用层其它协议" tabindex="-1"><a class="header-anchor" href="#应用层其它协议" aria-hidden="true">#</a> 应用层其它协议</h2><blockquote><p>应用层其它协议简单介绍</p></blockquote><ul><li>DNS</li><li>SMTP</li><li>MQTT</li></ul><ol><li>DNS</li></ol><p>有 dns 的地方，就有缓存。浏览器、操作系统、Local DNS、根域名服务器，它们都会对 DNS 结果做一定程度的缓存。本文总结一些常见的浏览器和操作系统的 DNS 缓存时间</p><p>浏览器先查询自己的缓存，查不到，则调用域名解析函数库对域名进行解析，以得到此域名对应的 IP 地址</p><p>DNS 查询顺序：浏览器缓存 → 系统缓存 → 路由器缓存 →ISP DNS 缓存 → 递归搜索</p><h2 id="curl-查看报文格式的实验" tabindex="-1"><a class="header-anchor" href="#curl-查看报文格式的实验" aria-hidden="true">#</a> CURL 查看报文格式的实验</h2><p>参见： 附录。</p>',49);function k(E,R){const i=a("ExternalLinkIcon");return r(),s("div",null,[v,t("p",null,[e("如： **"),t("a",b,[e("http://www.server.com/dir1/files.html**："),d(i)])]),t("ul",null,[m,t("li",null,[t("a",T,[e("www.server.com"),d(i)]),e(" ： 为域名，会通过 DNS 协议转化成具体主机的 IP，使用域名是为了让人们更好的理解，作用是标识网络中的某台主机，本质上是电子设备的电子定位；隐含了默认的端口 80（默认 http 使用 80 端口，https 使用 443 端口）；")]),x]),S,t("p",null,[e("参考"),t("a",y,[e("这里"),d(i)]),e(" 。")]),P,t("p",null,[e("可参考这里-"),t("a",C,[e("HTTP 头字段"),d(i)]),e("。")]),_])}const L=l(f,[["render",k],["__file","01-http.html.vue"]]);export{L as default};
