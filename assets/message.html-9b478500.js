import{_ as o,W as d,X as u,Y as l,Z as i,$ as e,a0 as c,C as t}from"./framework-16b96b76.js";const r={},h=c('<h3 id="_1-分布式消息常见问题" tabindex="-1"><a class="header-anchor" href="#_1-分布式消息常见问题" aria-hidden="true">#</a> 1. 分布式消息常见问题</h3><blockquote><p>互联网技术的产生无非就是系统中遇到了某种问题，而针对这些问题需要得到处理，应运而生就产生了一系列的技术。</p><p>因此，我们在研究一种技术的时候，就要先研究在现有系统中到底遇到了什么问题？解决问题的办法就是这种技术的重要关注点。即问题和解决方案。</p><p>这就是我们学习技术的方法论。下面的学习内容，也是围绕着“问题+解决方案”这个观点去布局和构思的，以后我会不断重申这种观点，以加强记忆和理解。</p></blockquote><ul><li>目前软件系统中遇到了什么困难？</li><li>引入消息中间件后解决了什么问题？ <ul><li>解耦</li><li>异步</li><li>削峰</li></ul></li><li>引入消息中间件之后同时引入了哪些问题？ <ul><li>增加了系统的复杂度</li><li>如果消息中间件整体宕机？</li><li>如果消息重复发送？</li><li>如果消息顺序不对？</li><li>如果结果不一致？（服务a调用b、c、d，依次处理后才算整个操作成功，但是引入消息中间件之后，发现b和c成功了，但是d没有成功，那整个操作应该算是成功能还是失败呢？怎么解决可能出现的这种情况呢？）</li></ul></li><li>消息中间件的选型标准？ <ul><li>吞吐量和topic数量</li><li>开源社区活跃度</li><li>消息的实效性、分布式可用性、消息可靠性（不会丢失消息）</li><li>功能支持是否齐全</li><li>结论总结：rabbitmq和kafka</li></ul></li><li>rabbitmq和kafka <ul><li>Rabbitmq的高可用实现方式？三种方式的区别？</li><li>Kafka的高可用原理？</li></ul></li></ul><hr><ul><li>生产者消费者模型</li></ul><hr><ul><li>消息中间件的使用示例 <ul><li>rabbitmq+SpringBoot使用案例 <ul><li>相关概念</li><li>部署过程</li><li>生产者代码</li><li>消费者代码</li></ul></li><li>kafka+SpringBoot使用案例 <ul><li>相关概念</li><li>部署过程</li><li>生产者代码</li><li>消费者代码</li></ul></li></ul></li></ul><hr><ul><li>MQ中如何保证消息不被重复消费？（如何保证消息的幂等性） <ul><li>问题的描述 <ul><li><code>生产者</code>生产了多条消息，导致消息有多条</li><li><code>消息中间件</code>直接断电了，导致offset没有来得及提交，没有提交但是已经被消费的消息就可能再次被消费</li><li><code>消费者</code>中间的多台主机可能会取到同一条数据，单个消息被多个消费者消费</li></ul></li><li>解决方案 <ul><li>视业务而定，如果业务是写redis，使用set，天然幂等性</li><li>如果是常规业务操作，可以在生产消息时使用全局唯一id，使用这个id作为消息的标识，每次消费时，先去redis中查一下是否有这个id，如果有就说明已经被消费过了，直接丢弃，如果没有，就说明没有被消费过</li></ul></li></ul></li></ul><hr><ul><li>MQ中如何保证消息的可靠性？（如何保证消息不丢失） <ul><li>问题描述 <ul><li><code>生产者导致消息丢失</code>：生产者组装完消息，发送给MQ，紧接着就去处理其他事物了，发送给MQ没有，具体不知道，但是生产者并接着去处理其他事物了，这就造成了到底发送消息了没有这个问题不清楚。这其中可能有网络抖动？生产者处组装完消息正要发送消息时突然宕机？</li><li><code>消息中间件导致消息丢失</code>： <ul><li>针对rabbitmq来说，可能的原因是消息中间件没有开启持久化机制，或者是开启持久化了，但是在开始持久化时，消息中间件宕机了，导致部分消息没有被消费，也没有持久化到磁盘中，那消息中间件再次启动时，就会导致部分消息丢失；此外，如果开启了消息的过期时间，这也会造成消息没有来得及消费，就被废弃，导致消息丢失</li><li>针对kafka来说，可能的原因是某一个broker宕机，重新选举partition的leader时，其他follower还有些数据没有完成同步，此时leader挂掉，在某一个follower成为leader后，就会发现消息丢失</li></ul></li><li><code>消费者导致消息丢失</code>：消费者刚取到消息正准备消费时，还没来得及处理消息，突然进程挂掉了或者重启了，这就导致这条消息丢失了（对于kafka来说，具体的表现就是取到消息后自动提交了offset，kafka认为消费者已经消费过这个消息，但是消费者正要消费时，此时消费者自己挂了，这就会导致这条消息丢失）</li></ul></li><li>解决方案 <ul><li><code>生产者导致消息丢失</code><ul><li>针对rabbitmq，可以使用<code>事务机制</code>和<code>确认机制</code>，区别就是<code>事务机制</code>是同步处理的，这就会导致rabbitmq的吞吐量的下降；<code>确认机制</code>是异步处理的，所以优先选择，确保消息一定会发送给rabbitmq</li><li>针对kafka，同样<code>开启确认机制</code>，当leader收到消息，并把消息同步到所有的follower中后，才认为消息写入成功，否则就进行无限重试</li></ul></li><li><code>消息中间件导致消息丢失</code><ul><li>针对rabbitmq，需要开<code>启持久化机</code>制。除了需要<code>关闭过期时间</code>外，还需要两步走，<code>第一步开启queue的持久化</code>，这样可以保证rabbitmq持久化queue的元数据，当重启时，可以根据持久化文件自动创建queue；<code>第二步开启消息的持久化</code>，消息发送到queue中之后自动会定期持久化到本地磁盘中。这还需要结合确认机制，即当消息确定持久化到本地硬盘后才进行生产者的确认。</li><li><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/2b50.svg#height=18&amp;id=Ptc8x&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/2b50.svg#height=18&amp;id=b03Aa&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li><li><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/2b50.svg#height=18&amp;id=YEEr5&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt="" loading="lazy">针对kafka，第一步设置topic的参数<code>replication.factor</code>参数的值大于1，要求每一个partition必须有至少2个副本；第二步设置<code>min.insync.replicas</code>参数，即要求leader感知到至少一个follower还跟自己保持联系，这样才能确保leader挂掉之后还有至少一个follower；第三步设置<code>acks=all</code>，即要求每条消息，必须在写入所有的replicas后才能认为写入成功；第四步设置<code>retries=MAX</code>，即一旦写入失败，就进行无限重试（此时可能会造成阻塞）；<code>（这也是kafka消息零丢失的实现原理）</code></li></ul></li><li><code>消费者导致消息丢失</code><ul><li>针对rabbitmq，就是<code>采取确认机制</code>，即消费完消息后调用rabbitmq的确认接口，手动确认消息消费完成，rabbitmq才会把这条消息标记为已消费；</li><li>针对kafka，就是<code>关闭自动提交offset的开关</code>，在处理完消息后<code>手动提交offset</code></li></ul></li></ul></li></ul></li></ul><hr><ul><li>如何保证消息的顺序性？ <ul><li>问题描述 <ul><li>以消息能可靠传入MQ中，并且生产者生产的消息是有序的为前提；又由于存储消息的queue本身就具有先进先出的特性；因此问题主要出现在消费者身上，多是因为：多个消费者同时消费同一个queue，或者是一个消费者多线程消费同一个queue</li></ul></li><li>解决方案 <ul><li>rabbitmq：一个消费者对应一个queue</li><li>kafka： 内部单线程消费</li></ul></li></ul></li></ul><hr><ul><li>如何解决消息积压？ <ul><li>问题描述 <ul><li><code>消息积压</code>：由于消费者故障或者由于消费者调用的外围组件异常（如某一消息要求消费者更新数据库，但是此时数据库发生宕机事故）导致消费者消费消息特别慢，而生产者那边却是按照正常速度进行生产，这就会导致MQ中积压很多的消息；</li><li><code>消息丢失</code>：由于消息积压过多，但是又没有来得及处理，并且消息中间件还设置了过期时间，这还会造成消息丢失的问题；</li></ul></li><li>解决方案 <ul><li>中心思想是分三步走 <ul><li>第一步，要求<code>快速把生产机器上的空间腾出来</code>。可以先临时征用10倍机器，然后写一个用来分发数据的消费者程序，一边接生产环境，一边接临时机器，消费者程序只做消息换手，即从生产环境接到消息，立马放入临时机器；</li><li>第二步，要求<code>快速把腾出来的消息消费掉</code>。可以临时征用其他机器，写一些专门用来消费这些消息的消费者程序，再接上上一步的临时机器进行实打实的消费；</li><li>第三步，<code>进行补偿</code>。如果遇到消息丢失的问题，就要写一个补偿程序，在业务量少的时间（如凌晨三四点时）针对白天的业务数据，重新生成消息</li></ul></li></ul></li></ul></li></ul><hr><ul><li>（开放题）如何设计一个MQ？ <ul><li>考官目的 <ul><li>主要考察候选人的架构设计能力</li></ul></li><li>回答提示 <ul><li>需要考虑MQ得支持可伸缩</li><li>需要考虑MQ得支持可持久化</li><li>需要考虑MQ得支持高可用</li><li>需要考虑MQ消息零丢失</li></ul></li></ul></li></ul><hr><ul><li>总结-方法论 <ul><li>考虑问题可能出现的地方时，主要从生产者消费模型的三个角色来考虑：<code>生产者</code>、<code>消息中间件</code>、<code>消费者</code></li><li>各个角色可能出现的问题无非就是下面的几种情况的组合： <ul><li>软件非正常中断，比如：程序突然卡死、应用程序重启、超过超时时间</li><li>网络不稳定，比如：网络抖动</li><li>硬件设备非正常中断，比如：硬盘突然失效、服务器设备突然断电、网卡设备损坏</li></ul></li><li>考虑解决方案时，就可以从以上各角色可能出现的问题分别考虑</li></ul></li></ul><h3 id="_2-企业级消息队列" tabindex="-1"><a class="header-anchor" href="#_2-企业级消息队列" aria-hidden="true">#</a> 2. 企业级消息队列</h3><h4 id="_2-1-rabbitmq" tabindex="-1"><a class="header-anchor" href="#_2-1-rabbitmq" aria-hidden="true">#</a> 2.1. rabbitmq</h4>',21),m={href:"https://mp.weixin.qq.com/s/KGCER3TWLT6Yk_UwsYJZyA",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/RhXe3cF_B3p78I2mEXY9EQ",target:"_blank",rel:"noopener noreferrer"},n=c('<h4 id="_2-2-rocketmq" tabindex="-1"><a class="header-anchor" href="#_2-2-rocketmq" aria-hidden="true">#</a> 2.2. rocketmq</h4><h4 id="_2-3-kafka" tabindex="-1"><a class="header-anchor" href="#_2-3-kafka" aria-hidden="true">#</a> 2.3. kafka</h4><h3 id="_3-生产实践——设备云基于rabbit-mq的消息模型" tabindex="-1"><a class="header-anchor" href="#_3-生产实践——设备云基于rabbit-mq的消息模型" aria-hidden="true">#</a> 3. 生产实践——设备云基于Rabbit MQ的消息模型</h3><h4 id="_3-1-消息处理流程" tabindex="-1"><a class="header-anchor" href="#_3-1-消息处理流程" aria-hidden="true">#</a> 3.1. 消息处理流程</h4><figure><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/29433025/1681705506216-047835a4-66c2-485b-b80e-3bc2b26170d0.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/29433025/1681705689399-d00fef9d-5602-405a-9b86-66df9c716e1d.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-2-消息丢失" tabindex="-1"><a class="header-anchor" href="#_3-2-消息丢失" aria-hidden="true">#</a> 3.2. 消息丢失</h4><ol><li>后端没有发送成功： 开启生产者确认机制，当MQ接收到消息后，给后端一个确认信息；</li><li>MQ丢失消息： 开启队列的持久化机制</li><li>主站接收到消息后还没来得及处理消息就宕机了，导致丢失消息： 开启消费者确认机制，后端处理接收到消息，完成业务逻辑处理之后，发送确认信息给MQ，MQ移除消息；</li></ol><h4 id="_3-3-消息重复消费" tabindex="-1"><a class="header-anchor" href="#_3-3-消息重复消费" aria-hidden="true">#</a> 3.3. 消息重复消费</h4><ol><li>在消费消息时，先去db或redis中查询一下是否存在这个消息的id： <ol><li>如果存在则证明已经消费过了，之后直接抛弃这条消息，并发确认信息给MQ，让MQ移除这条消息；</li><li>如果不存在，就处理这条消息，之后发送确认信息给MQ，让MQ移除这条消息，再之后把这条消息的id记录到db或redis中；</li></ol></li></ol><h4 id="_3-4-消息积压" tabindex="-1"><a class="header-anchor" href="#_3-4-消息积压" aria-hidden="true">#</a> 3.4. 消息积压</h4><ol><li>事前，预估系统消息容量，架设足够服务器资源，尽量避免消息积压情况的发生；</li><li>事中，紧急扩容后端服务器资源，让后端尽快处理掉积压的消息；</li><li>事后，反思总结经验教训； <ol><li>定位消息积压问题，查看是否是业务正常逻辑导致；若是，则需要再次评估后端服务器资源与MQ服务器资源是否需要扩容；若不是，则需要定位消息积压原因，并进行修复；</li></ol></li></ol><h4 id="_3-5-实时命令时序图" tabindex="-1"><a class="header-anchor" href="#_3-5-实时命令时序图" aria-hidden="true">#</a> 3.5. 实时命令时序图</h4><figure><img src="https://cdn.nlark.com/yuque/__puml/f037c59bd9e2b978827bd3e0de6c1f80.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcblxuYXV0b251bWJlclxuXG5hY3RvciBcIueUqOaIt1wiIGFzIFVzZXJcbnBhcnRpY2lwYW50IFwiYmFja2VuZFwiIGFzIGJhY2tlbmQgI3JlZFxucGFydGljaXBhbnQgXCJyZWRpc1wiIGFzIHJlZGlzICN5ZWxsb3dcbnBhcnRpY2lwYW50IFwiZGJcIiBhcyBkYiAjZ3JlZW5cbnBhcnRpY2lwYW50IFwicmFiYml0bXFcIiBhcyByYWJiaXRtcSAjcGlua1xucGFydGljaXBhbnQgXCJpcGNcIiBhcyBpcGMgI29yYW5nZVxucGFydGljaXBhbnQgXCJtYWNoaW5lXCIgYXMgbWFjaGluZSAjb2xpdmVcblxuYWN0aXZhdGUgVXNlclxuXG5Vc2VyIC0-IGJhY2tlbmQ6IOS4i-WPkeaKhOihqOWRveS7pFxuXG5hY3RpdmF0ZSBiYWNrZW5kXG5hY3RpdmF0ZSBkYlxuYmFja2VuZCAtPiBkYjog6I635Y-W6K6-5aSH5L-h5oGvXG5kZWFjdGl2YXRlIGRiXG5iYWNrZW5kIC0-IGJhY2tlbmQ6IOe7hOijheWRveS7pOS_oeaBr1xuXG5hY3RpdmF0ZSByYWJiaXRtcVxuYmFja2VuZCAtPiByYWJiaXRtcTog5Y-R6YCB5oqE6KGo5ZG95Luk5raI5oGv5Yiw6Zif5YiXXG5kZWFjdGl2YXRlIHJhYmJpdG1xXG5cbmFjdGl2YXRlIHJlZGlzXG5iYWNrZW5kIC0-IHJlZGlzOiDnlJ_miJDlkb3ku6RrZXlcbmFjdGl2YXRlIGRiXG5iYWNrZW5kIC0-IGRiOiDlubborrDlvZXmioTooajmk43kvZzkv6Hmga_liLBkYlxuZGVhY3RpdmF0ZSBkYlxuXG5ub3RlIHJpZ2h0IG9mIHJlZGlzOiDku6VoYXNo57uT5p6E77yM6K6-5aSHaWTkvZzkuLrlgLzlr7nosaHnmoRrZXnlrZjlhaVyZWRpc1xuZGVhY3RpdmF0ZSByZWRpc1xuYmFja2VuZCAtPiBVc2VyOiDlj5HpgIHlm57osIPmjqXlj6PvvIzov5vooYzph43lrprkvY1cbmRlYWN0aXZhdGUgYmFja2VuZFxuZGVhY3RpdmF0ZSBVc2VyXG5cblxuYWN0aXZhdGUgcmFiYml0bXFcbmFjdGl2YXRlIGlwY1xuaXBjIC0-IHJhYmJpdG1xOiDnm5HlkKznm7jlhbPpmJ_liJdcbmlwYyAtPiBpcGM6IOino-aekOa2iOaBr-W5tuino-aekOivt-axgumTvui3r1xuYWN0aXZhdGUgbWFjaGluZVxuaXBjIC0-IG1hY2hpbmU6IOWPkemAgeaKhOihqOWRveS7pFxubWFjaGluZSAtPiBpcGM6IOaOpeaUtuaKhOihqOe7k-aenFxuXG5kZWFjdGl2YXRlIG1hY2hpbmVcblxuaXBjIC0-IHJhYmJpdG1xOiDlj5HpgIHmioTooajnu5Pmnpzmtojmga9cbmRlYWN0aXZhdGUgaXBjXG5cblxuXG5hY3RpdmF0ZSBiYWNrZW5kXG5cbmJhY2tlbmQgLT4gcmFiYml0bXE6IOebkeWQrOWIsOaKhOihqOe7k-aenOS_oeaBr1xuXG5kZWFjdGl2YXRlIHJhYmJpdG1xXG5cbmFjdGl2YXRlIHJlZGlzXG5cbmJhY2tlbmQgLT4gcmVkaXM6IOWbnuafpeiuvuWkh-S_oeaBr--8jOW5tuWwhuiuvuWkh-S_oeaBr-S4juaKhOihqOS_oeaBr-S4gOS4gOe7hOijhVxuYWN0aXZhdGUgZGJcbmJhY2tlbmQgLT4gZGI6IOW5tuiusOW9leaKhOihqOiusOW9lee7k-aenOS_oeaBr1xuZGVhY3RpdmF0ZSBkYlxuZGVhY3RpdmF0ZSByZWRpc1xuZGVhY3RpdmF0ZSBiYWNrZW5kXG5cbmFjdGl2YXRlIFVzZXJcblVzZXIgLT4gYmFja2VuZDog6L2u6K6t5Zue6LCD5o6l5Y-jXG5cbmFjdGl2YXRlIGJhY2tlbmRcbmJhY2tlbmQgLT4gcmVkaXM6IOafpeivouaKhOihqOe7k-aenFxuXG5iYWNrZW5kIC0-IFVzZXI6IOWPkemAgeWTjeW6lOe7k-aenFxuZGVhY3RpdmF0ZSBiYWNrZW5kXG5kZWFjdGl2YXRlIFVzZXJcblxuQGVuZHVtbCIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX3B1bWwvZjAzN2M1OWJkOWUyYjk3ODgyN2JkM2UwZGU2YzFmODAuc3ZnIiwiaWQiOiJKZ2thQyIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>redis的存在的目的在于把抄表结果与设备信息对应起来，所以使用hash的数据结构更为妥当，让设备id作为值对象的key</li><li>第12步之后，由后端监听程序获取抄表结果，并把抄表结果存入redis，之后把抄表动作信息记录到db中</li><li>轮训频率为1s一次</li></ol><h4 id="_3-6-异步抄表时序图" tabindex="-1"><a class="header-anchor" href="#_3-6-异步抄表时序图" aria-hidden="true">#</a> 3.6. 异步抄表时序图</h4><figure><img src="https://cdn.nlark.com/yuque/__puml/dda8c4bbdc1959a30934dd2a9cabee10.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcblxuYXV0b251bWJlclxuXG5hY3RvciBcIueUqOaIt1wiIGFzIFVzZXJcbnBhcnRpY2lwYW50IFwiYmFja2VuZFwiIGFzIGJhY2tlbmQgI2dvbGRcbnBhcnRpY2lwYW50IFwicmVkaXNcIiBhcyByZWRpcyAjb3JhbmdlXG5wYXJ0aWNpcGFudCBcInJhYmJpdG1xXCIgYXMgcmFiYml0bXEgI3llbGxvd1xuXG5hY3RpdmF0ZSBVc2VyXG5cblVzZXIgLT4gYmFja2VuZDog5Y-R6YCB5oqE6KGo5ZG95LukXG5cbmFjdGl2YXRlIGJhY2tlbmQgXG5iYWNrZW5kIC0-IGJhY2tlbmQ6IOafpeivouaVsOaNruW6k-iuvuWkh-S_oeaBr1xuYmFja2VuZCAtPiBiYWNrZW5kOiDnu4Too4Xlkb3ku6Tkv6Hmga9cblxuYWN0aXZhdGUgcmFiYml0bXFcbmJhY2tlbmQgLT4gcmFiYml0bXE6IOWPkemAgeWRveS7pOa2iOaBr1xuZGVhY3RpdmF0ZSByYWJiaXRtcVxuXG5hY3RpdmF0ZSByZWRpc1xuYmFja2VuZCAtPiByZWRpczog57yT5a2Y6K6-5aSH5L-h5oGv77yM562J5b6F57uT5p6cXG5ub3RlIHJpZ2h0IG9mIHJlZGlzOiDkvb_nlKhoYXNo77yM5Lul6K6-5aSHaWTkvZzkuLrlgLzlr7nosaFrZXlcbmRlYWN0aXZhdGUgcmVkaXNcblxuYmFja2VuZCAtPiBVc2VyOiDov5Tlm57lk43lupTkv6Hmga9cbmRlYWN0aXZhdGUgYmFja2VuZFxuXG5cbmRlYWN0aXZhdGUgVXNlclxuXG5cblxuQGVuZHVtbCIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX3B1bWwvZGRhOGM0YmJkYzE5NTlhMzA5MzRkZDJhOWNhYmVlMTAuc3ZnIiwiaWQiOiJyeW81QyIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>这里的响应结果为操作成功，只是代表发送抄表命令的动作是成功的，并不代表抄表结果成功返回；</li><li>要想查询抄表动作是否成功，需要去操作中心再次调用接口去查询；</li></ol>',18);function p(Y,s){const a=t("ExternalLinkIcon");return d(),u("div",null,[h,l("blockquote",null,[l("p",null,[i("来自: "),l("a",m,[i("详细讲解！RabbitMQ防止数据丢失"),e(a)]),i(" 来自: "),l("a",b,[i("超详细的RabbitMQ入门"),e(a)])])]),n])}const g=o(r,[["render",p],["__file","message.html.vue"]]);export{g as default};
