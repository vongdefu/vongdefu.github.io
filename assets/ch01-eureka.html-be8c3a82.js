import{_ as e,W as a,X as i,a0 as l}from"./framework-16b96b76.js";const r={},d=l('<h1 id="_1-eureka服务治理" tabindex="-1"><a class="header-anchor" href="#_1-eureka服务治理" aria-hidden="true">#</a> 1. eureka服务治理</h1><h3 id="服务发现的由来" tabindex="-1"><a class="header-anchor" href="#服务发现的由来" aria-hidden="true">#</a> 服务发现的由来</h3><h4 id="从架构部署的角度" tabindex="-1"><a class="header-anchor" href="#从架构部署的角度" aria-hidden="true">#</a> 从架构部署的角度</h4><p><code>单体架构</code>应用的服务自成一体，大多不需要以来其他外部服务，但是有些也需要依赖外部服务，此时使用配置域名的方式，直接访问即可。</p><p>到了<code>soa架构时代</code>，服务化的架构内部依赖比较多，主要通过两种方式实现服务发现：</p><ol><li>服务消费者配置服务生产者的upstream。这样的缺点是服务消费者耦合了服务生产者的实现细节，例如，服务生产者需要添加一台主机，那么就需要服务消费者修改配置。</li><li>服务生产者提供统一的内网域名。这样，如果服务生产者需要添加一台主机，只需要在自己的前置机上添加一个ip地址即可。</li></ol><p>再往后发展，到了<code>微服务时代</code>，随着docker的流行，底层运维方式发生了巨大变化，业务不在部署在固定的虚拟机上，ip也不会一成不变。这时候，前面的方案就有些捉襟见肘了。但针对这个问题，不同的思考方式提供了不同的解决方案，下面列举几个：</p><ol><li>以ng为例，直接手工或通过脚本方式，在部署的时候直接更新ng的配置文件，然后在reload。或者是使用ngx_http_dyups_module通过rest api在运行时直接更新upstream，而不需要reload。</li><li>直接把服务注册中心作为一个标配的分布式服务组件引入系统，网关组件从服务注册中心获取相关服务的示例信息，从而达到动态路由。</li></ol><h4 id="从开发实现的角度" tabindex="-1"><a class="header-anchor" href="#从开发实现的角度" aria-hidden="true">#</a> 从开发实现的角度</h4><p>随着架构的发展，单体应用逐步过渡为微服务应用，服务之间的依赖会越来越多。假设团队b、c、d的服务需要团队a的服务提供接口，那么团队a中的服务就需要提供给团队b、c、d一个接口地址，此时如果团队b需要团队a提供一个新的接口地址，那么团队a就需要修改代码，同时团队c或d也需要提供一个新的接口地址，则团队a同样需要修改代码。就会出现这样的情况：就是不管团队b、c、d哪一个消费者需要增加一个接口或修改一个接口甚至弃用一个接口，抑或是团队a的项目需要进行扩容，都需要团队a修改自己的代码，这就造成了核心系统频繁修改代码。这其实是一个强耦合的关系，但是如果引入服务发现组件，团队b、c、d只需要与服务发现组件进行连接，即可获取团队a的代码，这样就可以达到解耦的目的。同时，不论团队a的服务扩容还是缩容，对b、c、d都不会产生过多影响。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>服务发现组件出现的主要目的是为了解决服务与服务间过多依赖形成强耦合关系的问题。随着技术不断演进，服务发现组件的功能也在不断增强，服务组册、服务监测、服务路由、负载均衡、自我保护等功能被引进来，也就逐步形成了服务治理组件的全部功能。</p><h2 id="springcloud-eureka简介" tabindex="-1"><a class="header-anchor" href="#springcloud-eureka简介" aria-hidden="true">#</a> SpringCloud Eureka简介</h2><h4 id="产生" tabindex="-1"><a class="header-anchor" href="#产生" aria-hidden="true">#</a> 产生</h4><p>由netflix公司开源，是为了解决aws不提供中间服务层的负载均衡问题而设计开发的。可以提供负载均衡、failover等支持。之所以产生eureka组件，而不使用原有的AWS Elastic Load Balancer，是因为WS Elastic Load Balancer需要暴露地址给外网，这样造成不安全的问题。另外一方面是因为，WS Elastic Load Balancer是基于代理的负载均衡，无法直接基于服务元数据信息定制负载均衡算法。由此就产生了eureka。</p><h4 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h4><p>主要介绍consul与eureka的区别。eureka服务端采用的是p2p的复制模式，不能保证复制操作一定能成功，它提供的是最终一致性的服务实例视图；客户端在服务端的注册信息有一个带期限的租约信息，一旦服务端在指定期限内没有收到客户端的心跳，则服务端就认为客户端组册的服务是不健康的，定时任务就会把客户端组册的服务剔除。consul采用的是raft算法，可以提供强一致性保证，并且consul的agent相当于ribbon和eureka客户端，对应用相对透明，同时相对eureka的集中式心跳检测机制，consul的agent可以参与到基于gossip协议的健康检查，这样分散了服务端的心跳检测压力。此外，eureka是由java编写，consul由go编写；eureka支持ap，consul支持cp。</p><p>但是如果团队选择的是ap，不是cp，并且团队是java语言体系，对组件的掌控力较强，则可以使用eureka。此外，eureka还提供了restful风格的api，可以针对注册到eureka上的服务进行操作。</p><h4 id="入门案例" tabindex="-1"><a class="header-anchor" href="#入门案例" aria-hidden="true">#</a> 入门案例</h4><ul><li>创建pom工程，引入SpringCloud、SpringBoot-starter的相关依赖。</li><li>创建eureka服务器端工程。 <ul><li>引入依赖</li><li>创建主启动类，并在主启动类中添加@EnableEurekaServer注解，以打开服务器端服务注册开关</li><li>修改配置文件，设置serviceUrl路径以及其他信息</li></ul></li><li>创建服务生产者工程。 <ul><li>引入依赖</li><li>创建主启动类，并在主启动类中添加@EnableDiscoveryClient注解，打开客户端服务注册开关</li><li>修改配置文件，设置serviceUrl路径信息与eureka服务器端工程一致</li><li>书写业务代码，给服务消费者提供服务</li></ul></li><li>创建服务消费者工程。 <ul><li>引入依赖</li><li>创建主启动类，并在主启动类中添加@EnableDiscoveryClient注解，打开客户端服务注册开关</li><li>修改配置文件，设置serviceUrl路径信息与eureka服务器端工程一致</li><li>书写业务代码，调用服务消费者提供的服务</li></ul></li></ul><p>此过程不全，需要进行完善。需要补充服务消费者调用服务生产者的配置和调用代码。</p><h4 id="rest-api" tabindex="-1"><a class="header-anchor" href="#rest-api" aria-hidden="true">#</a> REST API</h4><ul><li>查询实例 <ul><li>查询所有应用实例信息</li><li>根据appid查询实例信息</li><li>根据appid及instanceid查询实例信息</li><li>根据instanceid查询实例信息</li></ul></li><li>操作实例 <ul><li>注册新实例</li><li>注销实例</li><li>暂停、下线实例</li><li>恢复实例</li><li>发送应用实例心跳数据</li><li>修改实例元数据</li></ul></li></ul><h3 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h3><h4 id="核心类" tabindex="-1"><a class="header-anchor" href="#核心类" aria-hidden="true">#</a> 核心类</h4><ul><li>InstanceInfo：注册的服务实例</li><li>LeaseInfo：实例的租约信息</li><li>ServiceInstance：服务的通用信息</li><li>InstanceStatus：服务实例的状态信息</li><li>LeaseManager：此接口定义了应用服务实例在服务中心的几个操作方法。</li><li>LookupService：此接口定义了客户端从服务中心获取服务实例的查询方法</li><li>InstanceRegistry：</li><li>AbstractInstanceRegistry</li><li>PeerAwareInstanceRegistryImpl</li><li>。。。</li></ul><h4 id="服务的核心操作" tabindex="-1"><a class="header-anchor" href="#服务的核心操作" aria-hidden="true">#</a> 服务的核心操作</h4><ul><li>register</li><li>cancel</li><li>renew</li><li>evict</li></ul><h4 id="eureka的设计理念" tabindex="-1"><a class="header-anchor" href="#eureka的设计理念" aria-hidden="true">#</a> Eureka的设计理念</h4><ul><li>服务实例如何注册到服务中心 <ul><li>本质是服务启动时，调用Eureka Server的REST api的register方法，去注册该应用实例的信息。有两种方法，对java应用程序，可以使用Netflix的Eureka Client封装的API调用注册；对于SpringCloud的应用，可以使用spring-cloud-starter-netflix-eureka-client，基于SpringBoot的自动化配置，自动实现服务信息的注册。</li></ul></li><li>服务实例如何从服务中心剔除 <ul><li>正常情况下服务实例在关闭应用时，通过钩子的方法或者生命周期回调方法去调用EurekaServer的RESTApi的de-register方法，来剔除自身服务实例的信息。此外为了解决服务实例挂掉或者其他异常信息导致没有及时剔除自身信息的问题，EurekaServer会要求Client端定时续约，即发送心跳，来证明实例实例是正常的，如果租约超过一定时间没有进行续约操作，Eureakserver就会进行自动删除。</li></ul></li></ul><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>由架构发展演进过程引入服务发现组件，通过Netflix公司开源其自研的服务发现组件eureka来介绍服务发现组件的主要实现技术，由此引入eureka的应用案例，并简单介绍了eureka的其他特性。此外，还添加了eureka和其他同类产品的对比。</p>',32),n=[d];function u(c,h){return a(),i("div",null,n)}const s=e(r,[["render",u],["__file","ch01-eureka.html.vue"]]);export{s as default};
