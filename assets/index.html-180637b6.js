import{_ as o,W as k,X as r,Y as l,$ as e,a2 as t,Z as i,a0 as c,C as d}from"./framework-16b96b76.js";const b="/assets/1699281007111-ad429dbd.png",h={},n=c('<h1 id="springcloud实战" tabindex="-1"><a class="header-anchor" href="#springcloud实战" aria-hidden="true">#</a> SpringCloud实战</h1><p>学习的思路：一种新的技术的产生或一种新的架构思路的产生，一定是过去的旧事物无法满足现有问题的解决，或者是一定是原有的旧事物有些问题需要解决。因此，在学习新技术的时候，这种思想就可以作为一种指导思想。</p><h2 id="_1-微服务" tabindex="-1"><a class="header-anchor" href="#_1-微服务" aria-hidden="true">#</a> 1. 微服务</h2><h3 id="_1-1-什么是微服务" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是微服务" aria-hidden="true">#</a> 1.1. 什么是微服务</h3><ol><li>2014 年 <strong>Martin Fowler</strong> 提出的一种新的架构形式。微服务架构是一种<strong>架构模式</strong>，提倡将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制(如HTTP或Dubbo)互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具(如Maven)对其进行构建。</li><li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</li></ol><h3 id="_1-2-微服务解决了哪些问题" tabindex="-1"><a class="header-anchor" href="#_1-2-微服务解决了哪些问题" aria-hidden="true">#</a> 1.2. 微服务解决了哪些问题？</h3><ol><li>服务很多，客户端怎么访问，如何提供对外网关?</li><li>这么多服务，服务之间如何通信? HTTP还是RPC?</li><li>这么多服务，如何治理? 服务的注册和发现。</li><li>服务挂了怎么办？熔断机制。</li></ol><h3 id="_1-3-主流的微服务框架" tabindex="-1"><a class="header-anchor" href="#_1-3-主流的微服务框架" aria-hidden="true">#</a> 1.3. 主流的微服务框架</h3><ol><li>Spring Cloud Netflix</li><li>Spring Cloud Alibaba</li><li>SpringBoot + Dubbo + ZooKeeper</li></ol><h3 id="_1-4-springcloud-有哪些核心组件" tabindex="-1"><a class="header-anchor" href="#_1-4-springcloud-有哪些核心组件" aria-hidden="true">#</a> 1.4. SpringCloud 有哪些核心组件？</h3><figure><img src="'+b+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>三者关系</p><p>Spring 最初最核心的两大核心功能 Spring Ioc 和 Spring Aop 成就了 Spring，Spring 在这两大核心的功能上不断的发展，才有了 Spring 事务、Spring Mvc 等一系列伟大的产品，最终成就了 Spring 帝国，到了后期 Spring 几乎可以解决企业开发中的所有问题。 Spring Boot 是在强大的 Spring 帝国生态基础上面发展而来，发明 Spring Boot 不是为了取代 Spring ,是为了让人们更容易的使用 Spring 。 Spring Cloud 是一系列框架的有序集合。它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot 的开发风格做到一键启动和部署。 Spring Cloud 是为了解决微服务架构中服务治理而提供的一系列功能的开发框架，并且 Spring Cloud 是完全基于 Spring Boot 而开发，Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。</p><h2 id="_2-说明" tabindex="-1"><a class="header-anchor" href="#_2-说明" aria-hidden="true">#</a> 2. 说明</h2><p>本系列教程，主要是基于SpringCloud-Alibaba相关组件的实战演练，属于HelloWord性质的工程内容。同时，在讲解各个组件的过程中会穿插一些分布式的基本原理，但是不会展开。如果读者有兴趣，可以自行查阅本网站的其他文章。</p><h2 id="_3-微服务架构概述" tabindex="-1"><a class="header-anchor" href="#_3-微服务架构概述" aria-hidden="true">#</a> 3. 微服务架构概述</h2><p>架构主要分为三种架构类型，这三种架构类型分别是：应用架构、业务架构、技术架构，业务架构决定了应用架构，技术架构支撑了应用架构。架构的发展经历了三个阶段：单体应用到分布式架构、分布式架构到soa架构、soa架构到微服务架构。</p><p>早期的单体应用架构的缺点：</p><ul><li>所有的功能都集中在一个应用中；如果业务复杂会造成，整个应用的代码量很大；</li><li>模块之间界限不明，导致模块与模块之间的耦合度很高；</li><li>出现某一个小错误，就会造成整个应用的不可启动；</li><li>团队成员之间的协作灵活性较差：模块a可能依赖模块b，a开发完成后，需要等待b的开发；</li><li>很可能要求开发人员前后端同时开发，这对开发人员的技术功力要求很大；</li><li>很容易造成前后端责任界限不够清晰，比如有可能会在前端进行业务处理；</li></ul><p>分布式架构的特点：</p><ul><li>按照业务进行垂直划分，简单来讲，就是把原来的单体应用划分成多个应用，每一个应用都是一个单体应用，通过api相互调用来实现整体的应用的功能；</li></ul><p>SOA架构与微服务架构的区别：</p><ul><li>todo</li></ul><p>微服务架构的一些常见功能：</p><ul><li>服务注册与发现</li><li>负载均衡</li><li>熔断与容错</li><li>配置中心</li><li>网关与链路监控</li></ul><h2 id="_4-springcloud与中间件" tabindex="-1"><a class="header-anchor" href="#_4-springcloud与中间件" aria-hidden="true">#</a> 4. SpringCloud与中间件</h2><p>学习策略：本章节主要包括了SpringCloud中间件与其他中间件之间的关系，中间件解决了在企业级应用开发过程中遇到的哪些困难，中间件产生的背景、中间件的功能、以及Springcloud针对这些中间件的具体实现。</p><h3 id="_4-1-中间件概述" tabindex="-1"><a class="header-anchor" href="#_4-1-中间件概述" aria-hidden="true">#</a> 4.1. 中间件概述</h3><p>以前的中间件与操作系统和数据库并列为传统基础软件的三家马车，是运行在操作系统之上、应用软件之下的“中间层”的软件。但是随着云计算的发展，软件大规模向互联网云服务进行演化，中间件在整个过程中也不断扩大和演进自己的边界。中间件开始向下屏蔽异构的硬件设备、软件和网络等计算资源，向上提供应用、运行、维护等全生命周期的统一计算环境与管理。常见的中间件有：服务治理中间件、配置中心、全链路监控、分布式事务、分布式定时任务、消息中间件、api网关、分布式缓存、数据库中间件等。</p><h3 id="_4-2-springcloud概述" tabindex="-1"><a class="header-anchor" href="#_4-2-springcloud概述" aria-hidden="true">#</a> 4.2. SpringCloud概述</h3><p><code>本质上是一个中间件、目前由spring官方维护，基于SpringBoot开发，实现了微服务架构思想的一套中间件产品。</code>它提供了一系列的组件功能，如服务注册与发现（eureka、consul）、配置中心（config、nacos）、全链路监控（sleuth）、api网关（zuul、gateway、）、熔断器（hystrix）等选型中立（不依赖于平台和技术）的开源组件。每个独立的组件都有各自的软件版本，所有的组件合并成一个SpringCloud的版本，版本号由伦敦地铁站字母序命名。</p><h3 id="_4-3-springcloud与服务治理中间件" tabindex="-1"><a class="header-anchor" href="#_4-3-springcloud与服务治理中间件" aria-hidden="true">#</a> 4.3. SpringCloud与服务治理中间件</h3><p>服务治理中间件的基本功能包括以下内容。</p><ul><li>服务治理 <ul><li>服务注册与发现（Eureka、zk、consul）</li><li>服务路由 <ul><li>服务上下线</li><li>在线测试</li><li>机房就近选择</li><li>ab测试</li><li>灰度发布</li></ul></li><li>负载均衡 <ul><li>根据目标状态和目标权重进行负载均衡</li></ul></li><li>自我保护 <ul><li>服务降级</li><li>优雅降级</li><li>流量控制</li></ul></li></ul></li><li>丰富的治理管理机制</li></ul><h3 id="_4-4-springcloud与配置中心中间件" tabindex="-1"><a class="header-anchor" href="#_4-4-springcloud与配置中心中间件" aria-hidden="true">#</a> 4.4. SpringCloud与配置中心中间件</h3><p>配置中心产生的原因：在单体应用中 ，我们一般会把属性配置和代码硬编码到一起，但在分布式系统中，由于会存在多个服务实例，因此就需要管理每一个具体服务工程中的配置，上线前也需要checklist并逐个检查每一个上线的服务是否配置正常，且如果系统一旦上线，需要修改某项配置，就需要重启服务。这样管理起来非常麻烦。因此配置中心应运而生。</p><p>要求配置中心具有的功能有： 面向全公司（要求支持不同语言的应用接入）、要求与公司运维体系进行集成、要求对权限进行管理、要求对已有的配置中心进行兼容。</p><p>具体的实现有SpringCloud config和携程开源的配置中心Apollo。</p><h3 id="_4-5-springcloud与网关中间件" tabindex="-1"><a class="header-anchor" href="#_4-5-springcloud与网关中间件" aria-hidden="true">#</a> 4.5. SpringCloud与网关中间件</h3><p>出现在系统边界上的一个面向api、串行集中式的强管控服务，可以理解为企业级应用防火墙，主要起到隔离外部应用和内部应用的作用。</p><p>要求网关中间件具备的几个功能：</p><ul><li>统一接入功能 <ul><li>为各个无线应用提供统一的接入服务，提供一个高性能、高并发、高可靠的网关服务。还需要支持负载均衡、容灾切换、异地多活。</li></ul></li><li>协议适配功能 <ul><li>针对不同的后端提供的不同的服务协议进行适配。比如当一个http请求经过网关后，通过一系列不同的fitter进行处理完毕后，需要进行协议适配，然后判断协议转发调用的到底是rpc服务还是rest服务或者是php提供的服务。</li></ul></li><li>流量管控功能 <ul><li>网关作为所有请求流量的入口，当流量瞬间剧增，需要进行流量管控、流量调拨，服务不可用时，还需要网关进行熔断和降级。在异地多活场景下，还需要对流量进行切片，路由到不同的机房。</li></ul></li><li>安全防护功能 <ul><li>对所有的请求进行安全防护过滤，保护后端服务。还可以通过与安全风控部门进行合作，对ip黑名单、URL和名单封禁控制，做风控防护、防止恶意攻击等。</li></ul></li></ul><p>Springcloud中的网关</p><ul><li>zuul： qps很低，原理是针对每一个请求都分配一个线程来处理，qps最多一两千，高并发场景下，不推荐；</li><li>gateway： 底层是基于netty的多线程reactor模型实现，使用boss线程和worker线程接受异步处理请求，具有很强的高并发处理能力；</li></ul><h3 id="_4-6-springcloud与全链路监控中间件" tabindex="-1"><a class="header-anchor" href="#_4-6-springcloud与全链路监控中间件" aria-hidden="true">#</a> 4.6. SpringCloud与全链路监控中间件</h3><p>一个通过浏览器或移动客户端的前端请求到后端应用，会经过很多应用系统，并留下足迹和相关日志信息。但是这些分散到每一个业务主机下的日志不利于问题排查和问题定位。此时全链路监控中间件就应运而生。全链路监控中间件主要功能应该包括：</p><ul><li>定位慢调用</li><li>定位各种错误和异常</li><li>实现依赖和拓扑</li><li>追踪调用链</li><li>应用告警</li></ul><p>springcloud中的全链路监控中间件： pinpoint、skywalking等。</p><h2 id="_5-springcloud增强生态" tabindex="-1"><a class="header-anchor" href="#_5-springcloud增强生态" aria-hidden="true">#</a> 5. SpringCloud增强生态</h2><p>上述章节中介绍了微服务架构中遇到的一些问题以及微服务架构过程中所出现的一些技术，以及Springcloud基于这些问题所做的一些实现。 但是这些还不够。还有一些问题需要解决：</p><ul><li>单体应用拆分后，进程间通信机制和故障处理措施变的更加复杂；</li><li>微服务化后，一个看似简单的功能，可能需要调用多个服务并操作多个数据库才能实现，这就使得分布式事务问题变得异常突出；</li><li>微服务数量众多，测试、部署和监控问题变得更加困难；</li></ul><p>针对第一个问题，随着RPC框架的成熟，已经得到解决；Docker、Devops技术的发展以及各公有云Paas平台自动化运维工具的推出，第三个问题也变得很容易；唯独第二个问题还是一件具有挑战性的问题。</p><p>针对第一个问题，可以使用SpringCloud和gRPC进行集成，也可以使用SpringCloud与Dubbo生态的融合（如：spring-clod-dubbo项目，就是把dubbo融入SpringCloud生态，使微服务调用同时具备RESTful和Dubbo调用的能力，做到对业务代码无侵入、无感知，如果使用过程中引入jar包，就在服务调用间使用dubbo，如果去掉jar包，则使用默认的RESTful）。</p><p>归根结底，SpringCloud是技术上的一种架构，只是解决了架构层面的问题，但对于业务怎么开发、业务架构怎么治理、架构怎么防腐、如何解决应用架构间的复杂性问题，还需要方法论指导，此时，引入DDD面向领域设计模型的指导思想。</p><h2 id="文章列表" tabindex="-1"><a class="header-anchor" href="#文章列表" aria-hidden="true">#</a> 文章列表</h2>',55),p=l("h2",{id:"_17-如何设计一个安全可靠的api接口",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_17-如何设计一个安全可靠的api接口","aria-hidden":"true"},"#"),i(" 17. 如何设计一个安全可靠的API接口")],-1),m={href:"https://blog.csdn.net/zhipengfang/article/details/117455598",target:"_blank",rel:"noopener noreferrer"},u=l("h2",{id:"_18-文章列表",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_18-文章列表","aria-hidden":"true"},"#"),i(" 18. 文章列表")],-1),f={class:"task-list-container"},g=c('<li>『<a href="before_chaptera">你真的了解技术选型吗？</a>』</li><li>『<a href="before_chapterb">如何在SpringCloud项目中统一管理依赖的版本？</a>』</li><li>『<a href="before_easycode">使用idea插件生成代码</a> 』</li><li>『<a href="before_env">开发环境搭建手册</a>』</li><li>『<a href="chapter01">服务治理之Nacos</a> 』</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 传统调用方式</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 使用openfeign方式进行调用</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 注册到不同的命名空间以进行服务隔离</label></li><li>『<a href="chapter02">服务配置之Nacos</a>』</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 传统读取配置文件方式</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 从配置中心中读取配置项</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 从共享配置文件中读取配置项</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 把共享配置文件中的配置项映射成JavaBean</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 以服务名作为命名空间进行配置隔离</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 以环境名作为命名空间进行配置隔离</label></li><li>『<a href="chapter03">服务调用之OpenFeign</a>』</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> 多参数</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> URL中携带参数</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-11" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-11"> 传递对象</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-12" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-12"> 文件上传</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-13" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-13"> 文件下载</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-14" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-14"> 开启GZIP压缩</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-15" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-15"> 开启日志</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-16" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-16"> 超时控制</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-17" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-17"> 替换客户端</label></li><li>『<a href="chapter04">服务网关之Gateway</a>』</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-18" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-18"> 结合配置中心进行请求转发</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-19" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-19"> 重写路由</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-20" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-20"> 路由规则可配置化</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-21" disabled="disabled"><label class="task-list-item-label" for="task-item-21"> https的使用[xxx] 现在微服务的部署架构大多情况下是SLB+Nginx类型的部署模型，而微服务大多都是在内网环境中，因此网关也很少使用https；</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-22" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-22"> 集成swagger</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-23" disabled="disabled"><label class="task-list-item-label" for="task-item-23"> CROS方案</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-24" disabled="disabled"><label class="task-list-item-label" for="task-item-24"> 灰度发布 ：</label></li>',33),x={class:"task-list-item"},_=l("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-25",disabled:"disabled"},null,-1),S={class:"task-list-item-label",for:"task-item-25"},y={href:"https://blog.csdn.net/kingwinstar/article/details/105752725",target:"_blank",rel:"noopener noreferrer"},C={class:"task-list-item"},w=l("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-26",disabled:"disabled"},null,-1),B={class:"task-list-item-label",for:"task-item-26"},R={href:"https://github.com/lyb-geek/gateway",target:"_blank",rel:"noopener noreferrer"},v=c('<li>分布式事务管理之Seata <ul><li>『<a href="seata_distribute-transaction">分布式事务概论</a>』</li><li>『<a href="seata_install-seata">Seata服务端环境搭建</a>』</li><li>『<a href="seata_seata-at">AT模式</a>』</li><li>『<a href="seata_seata-tcc">TCC模式</a>』</li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-27" disabled="disabled"><label class="task-list-item-label" for="task-item-27"> Saga 模式</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-28" disabled="disabled"><label class="task-list-item-label" for="task-item-28"> 两阶段提交事务</label></li>',3),A={class:"task-list-item"},D=l("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-29",disabled:"disabled"},null,-1),N={class:"task-list-item-label",for:"task-item-29"},P={href:"https://mp.weixin.qq.com/s/Q7Xv8cypQFrrOQhbd9BOXw",target:"_blank",rel:"noopener noreferrer"},T=c('<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-30" disabled="disabled"><label class="task-list-item-label" for="task-item-30"> 持久化配置</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-31" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-31"> 基于网关的限流及自定义限流异常</label></li><li>『<a href="chapter06">分布式服务消息处理</a>』</li><li>『<a href="chapter07">分布式服务流量控制</a>』</li><li>『<a href="chapter08">分布式服务缓存</a>』</li><li>『<a href="chapter09">分布式服务链路追踪</a>』</li><li>『<a href="chapter10">分库分表</a>』</li><li>『<a href="chapter11">分布式服务Job</a>』</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-32" disabled="disabled"><label class="task-list-item-label" for="task-item-32"> 基于RabbitMQ使用消息中间件</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-33" disabled="disabled"><label class="task-list-item-label" for="task-item-33"> 创建交换机、binding 、 queue</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-34" disabled="disabled"><label class="task-list-item-label" for="task-item-34"> 发送消息</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-35" disabled="disabled"><label class="task-list-item-label" for="task-item-35"> 发送消息并确认</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-36" disabled="disabled"><label class="task-list-item-label" for="task-item-36"> 接受消息</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-37" disabled="disabled"><label class="task-list-item-label" for="task-item-37"> 接受消息并确认</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-38" disabled="disabled"><label class="task-list-item-label" for="task-item-38"> Cache</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-39" disabled="disabled"><label class="task-list-item-label" for="task-item-39"> 其他</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-40" disabled="disabled"><label class="task-list-item-label" for="task-item-40"> 分布式锁</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-41" disabled="disabled"><label class="task-list-item-label" for="task-item-41"> 分布式事务原理</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-42" disabled="disabled"><label class="task-list-item-label" for="task-item-42"> 分布式ID</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-43" disabled="disabled"><label class="task-list-item-label" for="task-item-43"> 分布式相关算法</label><ul><li><a href="other_create-a-niubi-api">如何设计一个安全可靠的API接口</a></li><li><a href="other_una-saas-toturial">多租户SaaS实战</a></li><li><a href="other_global-exception">统一响应体+Nacos可配置全局异常</a></li></ul></li>',20);function I(q,L){const a=d("RouterLink"),s=d("ExternalLinkIcon");return k(),r("div",null,[n,l("ul",null,[l("li",null,[e(a,{to:"/03-framework/springcloud/ch01-eureka.html"},{default:t(()=>[i("eureka服务治理")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch02-apollo.html"},{default:t(()=>[i("使用Apollo作为配置中心")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch03-nacos-register.html"},{default:t(()=>[i("nacos服务注册")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch04-nacos-config.html"},{default:t(()=>[i("nacos服务配置")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch05-openfeign.html"},{default:t(()=>[i("openfeign远程调用")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch06-gateway.html"},{default:t(()=>[i("gateway分布式网关")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch07-sentinel.html"},{default:t(()=>[i("sentinel分布式限流")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch08-seata.html"},{default:t(()=>[i("seata分布式事务")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch99-appendix01-globalresponseandnacosexception.html"},{default:t(()=>[i("统一响应体+Nacos可配置全局异常")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch99-appendix03-una_saas.html"},{default:t(()=>[i("多租户SaaS实战")]),_:1})]),l("li",null,[e(a,{to:"/03-framework/springcloud/ch99-appendix02-managedependence.html"},{default:t(()=>[i("统一管理依赖")]),_:1})])]),p,l("p",null,[l("a",m,[i("面试四连问：API 接口如何设计？安全如何保证？防重如何实现？签名如何实现？..."),e(s)])]),u,l("ul",f,[g,l("li",x,[_,l("label",S,[l("a",y,[i("https://blog.csdn.net/kingwinstar/article/details/105752725"),e(s)])])]),l("li",C,[w,l("label",B,[l("a",R,[i("https://github.com/lyb-geek/gateway"),e(s)])])]),v,l("li",A,[D,l("label",N,[i(" Sentinel ： "),l("a",P,[i("https://mp.weixin.qq.com/s/Q7Xv8cypQFrrOQhbd9BOXw"),e(s)])])]),T])])}const Q=o(h,[["render",I],["__file","index.html.vue"]]);export{Q as default};
