import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,C as i}from"./framework-16b96b76.js";const l="/assets/1702634626636-693f98e8.png",u="/assets/1702634686279-3ed878bc.png",r="/assets/1702634767076-ea661f51.png",k="/assets/1702634928585-8f5d9b74.png",d="/assets/1702635072323-ddf24acd.png",v="/assets/1702619543648-19fc4f81.png",m="/assets/1702621515879-098ff199.png",b={},f=p('<h1 id="_7-aqs" tabindex="-1"><a class="header-anchor" href="#_7-aqs" aria-hidden="true">#</a> 7. AQS</h1><blockquote><p>模板方法概述</p><ul><li>场景： 在一些业务场景的实现过程中，可能需要很多个步骤，但是针对某些特定的场景时，部分子步骤并不相同，除此意外，其他剩余步骤都相同，这样的业务场景中，我们就可以使用模板方法的设计模式。</li><li>实现思路： <ul><li>提供一个抽象类，这个抽象类中包含完成整个业务需求的所有步骤，并且实现了通用的业务步骤，不通用的业务步骤只有声明没有头实现；</li><li>子类继承抽象类，然后实现独属于自己的业务步骤；</li><li>在客户端只需要调用抽象类的公共步骤即可完成业务需求；</li><li>扩展时也只需要继承抽象类，实现独属于自己的业务步骤即可；</li></ul></li></ul></blockquote><ol><li><p>我们知道线程的本质实际上就是<strong>一组代码片段</strong>和<strong>一些变量</strong>的组合。而 Java 中实现线程事实上是通过 JNI 技术调用底层操作系统指令完成的，因此在多线程的应用场景中，<strong>早期版本的 Java 并不是很易用</strong>，甚至可以说“<strong>早期 Java 中使用线程的过程是复杂的</strong>”。</p></li><li><p>Java1.5 提供了** AQS <strong>和</strong>一系列基于 AQS 的扩展实现**一举解决了“<strong>早期 Java 中使用线程的过程是复杂的</strong>”——这一个重大问题。</p></li><li><p>AQS 指的是： java.util.concurrent.locks.AbstractQueuedSynchronizer 类。很多资料中说 AQS 是一个用来构造锁和同步器的框架，这是不严谨的，事实上 AQS 是 JDK 基于“模板方法”设计模式实现的一个“抽象类”。实际的业务场景中，我们并不会直接使用这个类，大多数情况下，我们<strong>使用的都是基于它的扩展实现</strong>，这些扩展实现包括**： ReentrantReadWriteLock、SynchronousQueue、FutureTask、Semaphore、CountDownLatch、 CyclicBarrier、ReadWriteLock** 等。</p></li><li><p>但是我们要先了解 AQS 的实现思想和实现原理，只有这样，才能更好的理解基于它的扩展实现。</p></li><li><p>首先来说，AQS 解决了什么问题。AQS 解决了：Java 早期版本中，在实现多线程访问共享资源的业务场景中，实现过程过于复杂的问题。作用： 让原本杂乱无章的多线程迅速完成排队过程，从而实现同步访问共享变量的过程。</p></li><li><p>AQS 解决上面这个问题的主要思路就是：设计一个 AQS 抽象类并基于这个抽象类扩展出一些不同的实现，这样一来，Java 程序员就可以通过使用基于 AQS 的扩展实现，就让“多线程访问共享资源”的业务场景变得很简单易用。</p></li><li><p>AQS 的核心思想：</p><ol><li>使用一个 volatile int state 变量来标识同步状态；</li><li>使用 CLH(Craig,Landin,and Hagersten)队列 来保存未获得访问共享资源权限的阻塞线程；</li><li>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</li></ol></li><li><p>AQS 提供了几个重要方法： 1.</p></li><li><p>然后基于这些方法，我们可以做什么？</p><ol><li>公平锁</li><li>非公平锁</li></ol></li><li><p>再之后就是： JDK 帮我们实现的同步器：</p></li></ol><p>JUC 包</p><figure><img src="'+l+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="'+u+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="'+r+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="aqs" tabindex="-1"><a class="header-anchor" href="#aqs" aria-hidden="true">#</a> AQS</h3><ol><li>模板方法设计模式</li><li>AQS 中的 state 和 CLH</li><li>ReentrantLock 的分析</li><li>使用示例</li></ol>',9),h={href:"https://www.yuque.com/zeanzai.me/nox53r/aatc8bi275r2a3z8",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Provides a framework <span class="token keyword">for</span> implementing blocking locks and related <span class="token function">synchronizers</span> <span class="token punctuation">(</span>semaphores<span class="token punctuation">,</span> events<span class="token punctuation">,</span> etc<span class="token punctuation">)</span> that rely on first<span class="token operator">-</span>in<span class="token operator">-</span>first<span class="token operator">-</span><span class="token function">out</span> <span class="token punctuation">(</span>FIFO<span class="token punctuation">)</span> wait queues<span class="token punctuation">.</span> This class is designed to be a useful basis <span class="token keyword">for</span> most kinds of synchronizers that rely on a single atomic <span class="token keyword">int</span> value to represent state<span class="token punctuation">.</span> Subclasses must define the protected methods that change this state<span class="token punctuation">,</span> and which define what that state means in terms of this object being acquired or released<span class="token punctuation">.</span> Given these<span class="token punctuation">,</span> the other methods in this class carry out all queuing and blocking mechanics<span class="token punctuation">.</span> Subclasses can maintain other state fields<span class="token punctuation">,</span> but only the atomically updated <span class="token keyword">int</span> value manipulated using methods <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> and <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> is tracked with respect to synchronization<span class="token punctuation">.</span>
提供一个框架，用于实现依赖先进先出（FIFO）等待队列的阻塞锁和相关同步器（信号量、事件等）。此类被设计为大多数类型的同步器的有用基础，这些同步器依赖于单个原子<span class="token keyword">int</span>值来表示状态。子类必须定义更改该状态的受保护方法，以及定义该状态在获取或释放该对象方面的含义。给定这些，类中的其他方法执行所有排队和阻塞机制。子类可以维护其他状态字段，但只有使用方法getState（）、setState（<span class="token keyword">int</span>）和compareAndSetState（<span class="token keyword">int</span>，<span class="token keyword">int</span>）操作的原子更新的<span class="token keyword">int</span>值才会相对于同步进行跟踪。

Subclasses should be defined as non<span class="token operator">-</span>public internal helper classes that are used to implement the synchronization properties of their enclosing class<span class="token punctuation">.</span> Class AbstractQueuedSynchronizer does not implement any synchronization interface<span class="token punctuation">.</span> Instead it defines methods such as <span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> that can be invoked as appropriate by concrete locks and related synchronizers to implement their public methods<span class="token punctuation">.</span>
子类应定义为非公共内部帮助类，用于实现其封闭类的同步属性。类AbstractQueuedSynchronizer不实现任何同步接口。相反，它定义了诸如AcquisibleInterruptible（<span class="token keyword">int</span>）之类的方法，具体锁和相关同步器可以适当地调用这些方法来实现它们的公共方法。

This class supports either or both a <span class="token keyword">default</span> exclusive mode and a shared mode<span class="token punctuation">.</span> When acquired in exclusive mode<span class="token punctuation">,</span> attempted acquires by other threads cannot succeed<span class="token punctuation">.</span> Shared mode acquires by multiple threads <span class="token function">may</span> <span class="token punctuation">(</span>but need not<span class="token punctuation">)</span> succeed<span class="token punctuation">.</span> This class does not <span class="token string">&quot;understand&quot;</span> these differences except in the mechanical sense that when a shared mode acquire succeeds<span class="token punctuation">,</span> the next waiting <span class="token function">thread</span> <span class="token punctuation">(</span><span class="token keyword">if</span> one exists<span class="token punctuation">)</span> must also determine whether it can acquire as well<span class="token punctuation">.</span> Threads waiting in the different modes share the same FIFO queue<span class="token punctuation">.</span> Usually<span class="token punctuation">,</span> implementation subclasses support only one of these modes<span class="token punctuation">,</span> but both can come into play <span class="token keyword">for</span> example in a ReadWriteLock<span class="token punctuation">.</span> Subclasses that support only exclusive or only shared modes need not define the methods supporting the unused mode<span class="token punctuation">.</span>
此类支持默认的独占模式和共享模式之一或两者。在独占模式下获取时，其他线程尝试的获取无法成功。多个线程获取共享模式可能（但不一定）成功。这个类不“理解”这些差异，除了在机械意义上，当共享模式获取成功时，下一个等待线程（如果存在）也必须确定它是否也可以获取。在不同模式中等待的线程共享相同的FIFO队列。通常，实现子类只支持其中一种模式，但两者都可以发挥作用，例如在ReadWriteLock中。仅支持独占模式或仅支持共享模式的子类不需要定义支持未使用模式的方法。

This class defines a nested AbstractQueuedSynchronizer<span class="token punctuation">.</span>ConditionObject class that can be used as a Condition implementation by subclasses supporting exclusive mode <span class="token keyword">for</span> which method <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reports whether synchronization is exclusively held with respect to the current thread<span class="token punctuation">,</span> method <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> invoked with the current <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> value fully releases this object<span class="token punctuation">,</span> and <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> given this saved state value<span class="token punctuation">,</span> eventually restores this object to its previous acquired state<span class="token punctuation">.</span> No AbstractQueuedSynchronizer method otherwise creates such a condition<span class="token punctuation">,</span> so <span class="token keyword">if</span> this constraint cannot be met<span class="token punctuation">,</span> <span class="token keyword">do</span> not use it<span class="token punctuation">.</span> The behavior of AbstractQueuedSynchronizer<span class="token punctuation">.</span>ConditionObject depends of course on the semantics of its synchronizer implementation<span class="token punctuation">.</span>
这个类定义了一个嵌套的AbstractQueuedSynchronizer。ConditionObject类，可由支持独占模式的子类用作Condition实现，方法isHeldExclusively（）报告同步是否相对于当前线程独占，用当前getState（）值调用的方法release（<span class="token keyword">int</span>）完全释放此对象，并在给定此保存的状态值的情况下获取（<span class="token keyword">int</span>），最终将该对象恢复到其先前获取的状态。没有AbstractQueuedSynchronizer方法会创建这样的条件，所以如果不能满足这个约束，就不要使用它。ConditionObject当然取决于其同步器实现的语义。

This class provides inspection<span class="token punctuation">,</span> instrumentation<span class="token punctuation">,</span> and monitoring methods <span class="token keyword">for</span> the internal queue<span class="token punctuation">,</span> as well as similar methods <span class="token keyword">for</span> condition objects<span class="token punctuation">.</span> These can be exported as desired into classes using an AbstractQueuedSynchronizer <span class="token keyword">for</span> their synchronization mechanics<span class="token punctuation">.</span>
此类提供内部队列的检查、检测和监视方法，以及条件对象的类似方法。可以根据需要使用AbstractQueuedSynchronizer将它们导出到类中，以实现它们的同步机制。

Serialization of this class stores only the underlying atomic integer maintaining state<span class="token punctuation">,</span> so deserialized objects have empty thread queues<span class="token punctuation">.</span> Typical subclasses requiring serializability will define a readObject method that restores this to a known initial state upon deserialization<span class="token punctuation">.</span>
此类的序列化只存储底层的原子整数维护状态，因此反序列化的对象具有空线程队列。需要可序列化性的典型子类将定义一个readObject方法，该方法在反序列化时将其恢复到已知的初始状态。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aqs-内部类" tabindex="-1"><a class="header-anchor" href="#aqs-内部类" aria-hidden="true">#</a> AQS 内部类</h3><p><img src="`+k+`" alt="" loading="lazy"> AbstractQueuedSynchronizer类底层的数据结构是使用CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列(虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系)。AQS是将每条请求共享资源的线程封装成一个CLH锁队列的一个结点(Node)来实现锁的分配。其中Sync queue，即同步队列，是双向链表，包括head结点和tail结点，head结点主要用作后续的调度。而Condition queue不是必须的，其是一个单向链表，只有当使用Condition时，才会存在此单向链表。并且可能会有多个Condition queue。</p><h4 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> final class Node <span class="token punctuation">{</span>
    <span class="token keyword">static</span> final Node SHARED <span class="token operator">=</span> new <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> final Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">static</span> final <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> final <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> final <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> final <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>

    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    
    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>    
    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>    
    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>    
    Node nextWaiter<span class="token punctuation">;</span>    
    
    final boolean <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    final Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws NullPointerException <span class="token punctuation">{</span>
        Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>
            throw new <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Used to establish initial head or SHARED marker</span>
    <span class="token punctuation">}</span>

    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// Used by addWaiter</span>
        this<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> mode<span class="token punctuation">;</span>
        this<span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Used by Condition</span>
        this<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> waitStatus<span class="token punctuation">;</span>
        this<span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image.png" loading="lazy"> 需要注意的是：</p><ol><li>这个内部类是一个虚拟双向链表（虚拟是指不存在实际的链表的对象实例，只存在链表节点之间的关系）；</li><li>在 AQS 中并没有对这个虚拟链表的初始化方法，它的初始化过程延迟到</li><li>主要用来构造同步队列，是双向链表，包括head结点和tail结点，head结点主要用作后续的调度</li></ol><h4 id="conditionobject" tabindex="-1"><a class="header-anchor" href="#conditionobject" aria-hidden="true">#</a> ConditionObject</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>public class ConditionObject implements Condition<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>
    private <span class="token keyword">static</span> final <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1173984872572414699L</span><span class="token punctuation">;</span>
    private transient Node firstWaiter<span class="token punctuation">;</span>
    private transient Node lastWaiter<span class="token punctuation">;</span>

    public <span class="token function">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    private Node <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>
        <span class="token comment">// If lastWaiter is cancelled, clean out.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Node node <span class="token operator">=</span> new <span class="token function">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span>
            firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>
        lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    private <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>
                lastWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>
            first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                 <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    private <span class="token keyword">void</span> <span class="token function">doSignalAll</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lastWaiter <span class="token operator">=</span> firstWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            Node next <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>
            first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
            first <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    private <span class="token keyword">void</span> <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node t <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>
        Node trail <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Node next <span class="token operator">=</span> t<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>trail <span class="token operator">==</span> null<span class="token punctuation">)</span>
                    firstWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    trail<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>
                    lastWaiter <span class="token operator">=</span> trail<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                trail <span class="token operator">=</span> t<span class="token punctuation">;</span>
            t <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    public final <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span>
            <span class="token function">doSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    public final <span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span>
            <span class="token function">doSignalAll</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public final <span class="token keyword">void</span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        boolean interrupted <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                interrupted <span class="token operator">=</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">||</span> interrupted<span class="token punctuation">)</span>
            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    private <span class="token keyword">static</span> final <span class="token keyword">int</span> REINTERRUPT <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>
    private <span class="token keyword">static</span> final <span class="token keyword">int</span> THROW_IE    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    private <span class="token keyword">int</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>
            <span class="token punctuation">(</span><span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">?</span> THROW_IE <span class="token operator">:</span> REINTERRUPT<span class="token punctuation">)</span> <span class="token operator">:</span>
            <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    private <span class="token keyword">void</span> <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span><span class="token keyword">int</span> interruptMode<span class="token punctuation">)</span>
        throws InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">==</span> THROW_IE<span class="token punctuation">)</span>
            throw new <span class="token function">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">==</span> REINTERRUPT<span class="token punctuation">)</span>
            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    public final <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>
            interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment">// clean up if cancelled</span>
            <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public final <span class="token keyword">long</span> <span class="token function">awaitNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>
            throws InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        final <span class="token keyword">long</span> deadline <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanosTimeout<span class="token punctuation">;</span>
        <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&gt;=</span> spinForTimeoutThreshold<span class="token punctuation">)</span>
                LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            nanosTimeout <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>
            interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span>
            <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    public final boolean <span class="token function">awaitUntil</span><span class="token punctuation">(</span>Date deadline<span class="token punctuation">)</span>
            throws InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">long</span> abstime <span class="token operator">=</span> deadline<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        boolean timedout <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> abstime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                timedout <span class="token operator">=</span> <span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            LockSupport<span class="token punctuation">.</span><span class="token function">parkUntil</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> abstime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>
            interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span>
            <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>timedout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    public final boolean <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>
            throws InterruptedException <span class="token punctuation">{</span>
        <span class="token keyword">long</span> nanosTimeout <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        final <span class="token keyword">long</span> deadline <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanosTimeout<span class="token punctuation">;</span>
        boolean timedout <span class="token operator">=</span> false<span class="token punctuation">;</span>
        <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                timedout <span class="token operator">=</span> <span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanosTimeout <span class="token operator">&gt;=</span> spinForTimeoutThreshold<span class="token punctuation">)</span>
                LockSupport<span class="token punctuation">.</span><span class="token function">parkNanos</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            nanosTimeout <span class="token operator">=</span> deadline <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>
            interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span>
            <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>timedout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    final boolean <span class="token function">isOwnedBy</span><span class="token punctuation">(</span>AbstractQueuedSynchronizer sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sync <span class="token operator">==</span> AbstractQueuedSynchronizer<span class="token punctuation">.</span>this<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    protected final boolean <span class="token function">hasWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node w <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span> w <span class="token operator">!=</span> null<span class="token punctuation">;</span> w <span class="token operator">=</span> w<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span>
                <span class="token keyword">return</span> true<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    protected final <span class="token keyword">int</span> <span class="token function">getWaitQueueLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node w <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span> w <span class="token operator">!=</span> null<span class="token punctuation">;</span> w <span class="token operator">=</span> w<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span>
                <span class="token operator">++</span>n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    protected final Collection<span class="token operator">&lt;</span>Thread<span class="token operator">&gt;</span> <span class="token function">getWaitingThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            throw new <span class="token function">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ArrayList<span class="token operator">&lt;</span>Thread<span class="token operator">&gt;</span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;</span>Thread<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node w <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span> w <span class="token operator">!=</span> null<span class="token punctuation">;</span> w <span class="token operator">=</span> w<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aqs-初始化" tabindex="-1"><a class="header-anchor" href="#aqs-初始化" aria-hidden="true">#</a> AQS 初始化</h3><ul><li>利用初始化机制搞定属性的设置</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
private <span class="token keyword">static</span> final Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
private <span class="token keyword">static</span> final <span class="token keyword">long</span> stateOffset<span class="token punctuation">;</span>
private <span class="token keyword">static</span> final <span class="token keyword">long</span> headOffset<span class="token punctuation">;</span>
private <span class="token keyword">static</span> final <span class="token keyword">long</span> tailOffset<span class="token punctuation">;</span>
private <span class="token keyword">static</span> final <span class="token keyword">long</span> waitStatusOffset<span class="token punctuation">;</span>
private <span class="token keyword">static</span> final <span class="token keyword">long</span> nextOffset<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">{</span>
    try <span class="token punctuation">{</span>
        stateOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>
            <span class="token punctuation">(</span>AbstractQueuedSynchronizer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>
            <span class="token punctuation">(</span>AbstractQueuedSynchronizer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tailOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>
            <span class="token punctuation">(</span>AbstractQueuedSynchronizer<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;tail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        waitStatusOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>
            <span class="token punctuation">(</span>Node<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;waitStatus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nextOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>
            <span class="token punctuation">(</span>Node<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;next&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> <span class="token function">catch</span> <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> throw new <span class="token function">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aqs-的方法" tabindex="-1"><a class="header-anchor" href="#aqs-的方法" aria-hidden="true">#</a> AQS 的方法</h3><p>先来看一下 AQS 类的结构：</p><figure><img src="`+v+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ol><li>只提供操作 state 变量和 CLH 队列的基本方法；</li><li>根据具体的需求，把对 state 变量和 CLH 队列的部分操作方法延迟到子类中实现；</li></ol><p>我们发现 AQS 中有两个内部类：</p><ol><li>Node： CLH 队列</li><li>ConditionObject</li></ol><p>有大量的 public final 标识的方法； 也有几个 protected 标识的方法；的方法大概分为两部分：</p><p>protected访问控制符</p><p>protected访问控制符是专门为继承打造的，protected可见性=default+对子类可见 （对自己的包可见和对其子类可见） 子类覆盖父类的方法，不可以用可见性更小的修饰符，但是可以用更高的修饰符（父类定义为protected，子类可以定义为protected或public）子类覆盖父类方法时，父类的引用指向子类的对象，此时引用是有权限调用子类的方法的，但是此时定义为private就会出错；</p><p>修饰符</p><p>final用在不同的地方有不同的作用，但是本质都很相似 final修饰类：不可被继承 final修饰方法：不能被子类覆盖 final修饰变量：不可被重新赋值 final修饰成员变量时必须要赋值，在声明或者构造函数里赋值，且只能赋值一次 final不能用来修饰构造方法 若果final定义了一个引用，则引用指向对象是固定了，不能指向其他对象，但是对象里的成员变量值是可以修改的</p>',23),y={href:"https://jetbrains.design/intellij/resources/icons_list/",target:"_blank",rel:"noopener noreferrer"},g=n("figure",null,[n("img",{src:m,alt:"image.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image.png")],-1),S=n("ul",null,[n("li",null,"什么是AQS? 为什么它是核心?"),n("li",null,"AQS的核心思想是什么? 它是怎么实现的? 底层数据结构等"),n("li",null,"AQS有哪些核心的方法?"),n("li",null,"AQS定义什么样的资源获取方式? AQS定义了两种资源获取方式：独占(只有一个线程能访问执行，又根据是否按队列的顺序分为公平锁和非公平锁，如ReentrantLock) 和共享(多个线程可同时访问执行，如Semaphore、CountDownLatch、 CyclicBarrier )。ReentrantReadWriteLock可以看成是组合式，允许多个线程同时对某一资源进行读。"),n("li",null,"AQS底层使用了什么样的设计模式? 模板"),n("li",null,"AQS的应用示例?")],-1),x=n("hr",null,null,-1),W={href:"https://pdai.tech/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.wolai.com/tvtGpAAntFBaN4xrTrEywQ",target:"_blank",rel:"noopener noreferrer"},T=n("ol",null,[n("li",null,"问题背景"),n("li",null,"怎么使用"),n("li",null,"基本原理"),n("li",null,"扩展使用")],-1);function A(I,Q){const a=i("ExternalLinkIcon");return o(),c("div",null,[f,n("p",null,[n("a",h,[s("模板方法模式"),t(a)]),s("中可以得知，我们期望也设计出一个类似于 drink() 的方法。但实际上 AQS 并没有使用这种方式，而是把 AQS 设计成抽象类，然后只提供一些维护 state 和 CLH 队列的方法，并把几个重要的方法设置成 procted 的访问形式，这样一来，AQS 的扩展类就可以通过重写这些方法来操作 state 和 CLH 队列， 从而实现满足不同需求的扩展实现，如公平锁、非公平锁、读写锁、信号量、CountDownLatch 等。")]),w,n("p",null,[n("a",y,[s("idea icons_list"),t(a)])]),g,S,x,n("p",null,[s("著作权归@pdai所有 原文链接："),n("a",W,[s("https://pdai.tech/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html"),t(a)]),n("a",N,[s("https://www.wolai.com/tvtGpAAntFBaN4xrTrEywQ"),t(a)])]),T])}const _=e(b,[["render",A],["__file","ch07-aqs.html.vue"]]);export{_ as default};
