import{_ as t,W as n,X as o,Y as i,Z as e,$ as a,a0 as r,C as h}from"./framework-16b96b76.js";const d="/assets/1677578774614-383a2cf0.jpeg",s="/assets/1677580943824-73a3bc52.jpeg",c="/assets/1690857435685-e14428c8.jpeg",_="/assets/1678154013813-ac9e2066.jpeg",u="/assets/1704544808652-ac9dc5cd.jpeg",p="/assets/1704544808661-a9fe34ad.jpeg",f="/assets/1690858778564-376f7971.jpeg",g={},b={href:"https://cloud.tencent.com/developer/article/1819045",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/x-cpa/ShardingSphereDemo",target:"_blank",rel:"noopener noreferrer"},x=r('<figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-实验" tabindex="-1"><a class="header-anchor" href="#_1-实验" aria-hidden="true">#</a> 1. 实验</h3><ol><li>构建千万级别数据库表；</li><li>对比下面三种情况的响应速度 <ol><li>使用索引的方式查询</li><li>不使用索引的方式查询</li><li>使用索引失效的方式查询</li></ol></li><li>加缓存的方案： 首次查询从数据库中查询，之后放入缓存中，第二次及以后的查询全部走缓存</li><li>读写分离的方案：</li><li>多数据源读写的方案：</li><li>分库分表的方案：创建多个库多个表，并从表中读取数据『目的是为了验证读写多个库里面的多张表』 <ol><li>C端用户订单表</li><li>B端用户订单表</li></ol></li><li>单库亿级数据分库分表『实现数据迁移』 <ol><li>全量同步 <ol><li>断点续传</li><li>数据一致性问题</li><li></li></ol></li></ol></li></ol><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-分库分表带来的问题及解决方案" tabindex="-1"><a class="header-anchor" href="#_2-分库分表带来的问题及解决方案" aria-hidden="true">#</a> 2. 分库分表带来的问题及解决方案</h3>',9),S={href:"https://www.bilibili.com/video/BV1aY411K7qy/",target:"_blank",rel:"noopener noreferrer"},k=r('<figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-id" tabindex="-1"><a class="header-anchor" href="#_3-id" aria-hidden="true">#</a> 3. id</h3><h3 id="_4-分布式事务" tabindex="-1"><a class="header-anchor" href="#_4-分布式事务" aria-hidden="true">#</a> 4. 分布式事务</h3><p>一般情况下是两阶段提交和TCC。但是多数实际应用场景中，并不直接使用分布式事务，因为分布式事务：</p><ul><li>会带来严重的性能损耗</li><li>会引入额外的系统复杂度</li><li>分布式事务出现的几率很低</li></ul><p>一般采用柔性事务，即保证最终一致性。可以采用下面多种措施配合使用来保证最终一致性：</p><ul><li>回滚</li><li>重试</li><li>监控</li><li>告警</li><li>幂等</li><li>对账</li><li>人工介入</li></ul><p>如果非要使用分布式事务，可以使用阿里开源的Seata框架。</p><h3 id="_5-跨库查询和分页" tabindex="-1"><a class="header-anchor" href="#_5-跨库查询和分页" aria-hidden="true">#</a> 5. 跨库查询和分页</h3><p>方案1 选择合适的分库分表字段 方案2 引入搜索引擎ES 方案3 分开查询，内存聚合</p><hr><h3 id="_6-为什么要分" tabindex="-1"><a class="header-anchor" href="#_6-为什么要分" aria-hidden="true">#</a> 6. 为什么要分</h3><ul><li>软件系统也不是一上来就进行分库分表的，而是有一个演进过程： <ul><li>先是试着优化sql，提高单条sql的执行效率；</li><li>接着是加缓存、多租户、多数据源、读写分离；</li><li>最后才是分库分表；</li><li>但随着微服务领域的技术的发展，分库分表已经不重要了；</li></ul></li><li>RDBMS受单机存储容量、连接数、CPU处理能力、网络带宽等因素影响，容易成为系统瓶颈；</li></ul><h3 id="_7-什么时候分" tabindex="-1"><a class="header-anchor" href="#_7-什么时候分" aria-hidden="true">#</a> 7. 什么时候分</h3><ol><li>能不分就不分</li></ol><p>秉持的原则是： 能不分就不分，分库分表是迫不得已的选择，并不是一开始就使用的。这样做的原因是： 过度设计和过早优化会导致系统复杂性增高，可用性降低。因此在分之前要先考虑，机器性能是否已经被压榨到了极限？</p><p>因此在系统设计初期，就需要尽早考虑如何压榨RDBMS的机器的性能。一般情况下从下面几个角度去考虑：</p><ul><li>表设计，基本原则是根据业务进行解耦、创建一些索引用来提高查询效率</li><li>业务实现上面，基本原则，sql优化、使用缓存、</li></ul><p>如： 从sql优化、读写分离、使用缓存、多数据源等方面先进行优化，</p><ol><li></li></ol><h3 id="_8-理论基础" tabindex="-1"><a class="header-anchor" href="#_8-理论基础" aria-hidden="true">#</a> 8. 理论基础</h3><h4 id="_8-1-数据切分" tabindex="-1"><a class="header-anchor" href="#_8-1-数据切分" aria-hidden="true">#</a> 8.1. 数据切分</h4><ul><li>垂直切分 <ul><li>垂直分库： 如何分、优缺点</li><li>垂直分表： 如何分、优缺点</li></ul></li><li>水平切分 <ul><li>水平分库： 如何分、优缺点</li><li>水平分表： 如何分、优缺点</li></ul></li></ul><h4 id="_8-2-分库分表带来的问题及解决方案" tabindex="-1"><a class="header-anchor" href="#_8-2-分库分表带来的问题及解决方案" aria-hidden="true">#</a> 8.2. 分库分表带来的问题及解决方案</h4><ul><li>事务一致性问题</li><li>跨节点关联查询问题</li><li>跨节点分页、排序、函数执行问题</li><li>全局主键避重问题</li><li>数据迁移、扩容、校验 <ul><li>分为停机迁移、不停机迁移</li><li>迁移后需要对迁移后的数据进行校验</li></ul></li></ul><h3 id="_9-中间件" tabindex="-1"><a class="header-anchor" href="#_9-中间件" aria-hidden="true">#</a> 9. 中间件</h3><h3 id="_10-实践案例" tabindex="-1"><a class="header-anchor" href="#_10-实践案例" aria-hidden="true">#</a> 10. 实践案例</h3><h3 id="_11-分库分表演进过程" tabindex="-1"><a class="header-anchor" href="#_11-分库分表演进过程" aria-hidden="true">#</a> 11. 分库分表演进过程</h3><ul><li>优化SQL</li><li>加缓存</li><li>多租户</li><li>多数据源</li><li>读写分离</li><li>分库分表</li></ul><h3 id="_12-参考" tabindex="-1"><a class="header-anchor" href="#_12-参考" aria-hidden="true">#</a> 12. 参考</h3>',30),z={href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU3MDAzNDg1MA==&action=getalbum&album_id=2389616635193393153&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/zuihou/lamp-cloud",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.bilibili.com/video/BV1aY411K7qy/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cloud.tencent.com/developer/article/1819045",target:"_blank",rel:"noopener noreferrer"};function B(j,v){const l=h("ExternalLinkIcon");return n(),o("div",null,[i("ul",null,[i("li",null,[i("a",b,[e("实战彻底搞清分库分表（垂直分库，垂直分表，水平分库，水平分表）"),a(l)])])]),i("p",null,[e("源码地址： "),i("a",m,[e("https://github.com/x-cpa/ShardingSphereDemo"),a(l)])]),x,i("p",null,[e("参考： "),i("a",S,[e("如何解决分库分表带来的问题？"),a(l)])]),k,i("ul",null,[i("li",null,[i("a",z,[e("ShardingSphere进阶"),a(l)])]),i("li",null,[i("a",y,[e("lamp-cloud : saas 平台"),a(l)])]),i("li",null,[i("a",q,[e("如何解决分库分表带来的问题？"),a(l)])]),i("li",null,[i("a",w,[e("实战彻底搞清分库分表（垂直分库，垂直分表，水平分库，水平分表）"),a(l)])])])])}const D=t(g,[["render",B],["__file","duration.html.vue"]]);export{D as default};
